#+TITLE: Java 9 Modularity
#+VERSION: 2017
#+AUTHOR: Sander Mak & Paul Bakker
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Foreword][Foreword]]
- [[Preface][Preface]]
  - [[Who Should Read This Book][Who Should Read This Book]]
  - [[Why We Wrote This Book][Why We Wrote This Book]]
  - [[Navigating This Book][Navigating This Book]]
  - [[Using Code Examples][Using Code Examples]]
  - [[Conventions Used in This Book][Conventions Used in This Book]]
  - [[O’Reilly Safari][O’Reilly Safari]]
  - [[How to Contact Us][How to Contact Us]]
  - [[Acknowledgments][Acknowledgments]]
- [[I. Introduction to the Java Module System][I. Introduction to the Java Module System]]
- [[1. Modularity Matters][1. Modularity Matters]]
  - [[What Is Modularity?][What Is Modularity?]]
  - [[Before Java 9][Before Java 9]]
    - [[JARs as Modules?][JARs as Modules?]]
    - [[Classpath Hell][Classpath Hell]]
  - [[Java 9 Modules][Java 9 Modules]]
- [[2. Modules and the Modular JDK][2. Modules and the Modular JDK]]
  - [[The Modular JDK][The Modular JDK]]
  - [[Module Descriptors][Module Descriptors]]
  - [[Readability][Readability]]
  - [[Accessibility][Accessibility]]
  - [[Implied Readability][Implied Readability]]
  - [[Qualified Exports][Qualified Exports]]
  - [[Module Resolution and the Module Path][Module Resolution and the Module Path]]
  - [[Using the Modular JDK Without Modules][Using the Modular JDK Without Modules]]
- [[3. Working with Modules][3. Working with Modules]]
  - [[Your First Module][Your First Module]]
    - [[Anatomy of a Module][Anatomy of a Module]]
    - [[Naming Modules][Naming Modules]]
    - [[Compilation][Compilation]]
    - [[Packaging][Packaging]]
    - [[Running Modules][Running Modules]]
    - [[Module Path][Module Path]]
    - [[Linking Modules][Linking Modules]]
  - [[No Module Is an Island][No Module Is an Island]]
    - [[Introducing the EasyText Example][Introducing the EasyText Example]]
    - [[A Tale of Two Modules][A Tale of Two Modules]]
  - [[Working with Platform Modules][Working with Platform Modules]]
    - [[Finding the Right Platform Module][Finding the Right Platform Module]]
    - [[Creating a GUI Module][Creating a GUI Module]]
  - [[The Limits of Encapsulation][The Limits of Encapsulation]]
    - [[Interfaces and Instantiation][Interfaces and Instantiation]]
- [[4. Services][4. Services]]
  - [[Factory Pattern][Factory Pattern]]
  - [[Services for Implementation Hiding][Services for Implementation Hiding]]
    - [[Providing Services][Providing Services]]
    - [[Consuming Services][Consuming Services]]
    - [[Service Life Cycle][Service Life Cycle]]
    - [[Service Provider Methods][Service Provider Methods]]
  - [[Factory Pattern Revisited][Factory Pattern Revisited]]
  - [[Default Service Implementations][Default Service Implementations]]
  - [[Service Implementation Selection][Service Implementation Selection]]
    - [[Service Type Inspection and Lazy Instantiation][Service Type Inspection and Lazy Instantiation]]
  - [[Module Resolution with Service Binding][Module Resolution with Service Binding]]
  - [[Services and Linking][Services and Linking]]
- [[5. Modularity Patterns][5. Modularity Patterns]]
  - [[Determining Module Boundaries][Determining Module Boundaries]]
  - [[Lean Modules][Lean Modules]]
  - [[API Modules][API Modules]]
    - [[What Should Be in an API Module?][What Should Be in an API Module?]]
    - [[Implied Readability][Implied Readability]]
    - [[API Module with a Default Implementation][API Module with a Default Implementation]]
  - [[Aggregator Modules][Aggregator Modules]]
    - [[Building a Facade over Modules][Building a Facade over Modules]]
    - [[Safely Splitting a Module][Safely Splitting a Module]]
  - [[Avoiding Cyclic Dependencies][Avoiding Cyclic Dependencies]]
    - [[Split Packages][Split Packages]]
    - [[Breaking Cycles][Breaking Cycles]]
  - [[Optional Dependencies][Optional Dependencies]]
    - [[Compile-Time Dependencies][Compile-Time Dependencies]]
    - [[Implementing Optional Dependencies with Services][Implementing Optional Dependencies with Services]]
  - [[Versioned Modules][Versioned Modules]]
    - [[Module Resolution and Versioning][Module Resolution and Versioning]]
  - [[Resource Encapsulation][Resource Encapsulation]]
    - [[Loading Resources from a Module][Loading Resources from a Module]]
    - [[Loading Resources Across Modules][Loading Resources Across Modules]]
    - [[Working with ResourceBundles][Working with ResourceBundles]]
- [[6. Advanced Modularity Patterns][6. Advanced Modularity Patterns]]
  - [[Strong Encapsulation Revisited][Strong Encapsulation Revisited]]
    - [[Deep Reflection][Deep Reflection]]
    - [[Open Modules and Packages][Open Modules and Packages]]
    - [[Dependency Injection][Dependency Injection]]
  - [[Reflection on Modules][Reflection on Modules]]
    - [[Introspection][Introspection]]
    - [[Modifying Modules][Modifying Modules]]
    - [[Annotations][Annotations]]
  - [[Container Application Patterns][Container Application Patterns]]
    - [[Layers and Configurations][Layers and Configurations]]
    - [[Classloading in Layers][Classloading in Layers]]
    - [[Plug-in Architectures][Plug-in Architectures]]
    - [[Container Architectures][Container Architectures]]
    - [[Resolving Platform Modules in Containers][Resolving Platform Modules in Containers]]
- [[II. Migration][II. Migration]]
- [[7. Migration Without Modules][7. Migration Without Modules]]
  - [[The Classpath Is Dead, Long Live the Classpath][The Classpath Is Dead, Long Live the Classpath]]
  - [[Libraries, Strong Encapsulation, and the JDK 9 Classpath][Libraries, Strong Encapsulation, and the JDK 9 Classpath]]
  - [[Compilation and Encapsulated APIs][Compilation and Encapsulated APIs]]
  - [[Removed Types][Removed Types]]
  - [[Using JAXB and Other Java EE APIs][Using JAXB and Other Java EE APIs]]
  - [[The jdk.unsupported Module][The jdk.unsupported Module]]
  - [[Other Changes][Other Changes]]
- [[8. Migration to Modules][8. Migration to Modules]]
  - [[Migration Strategies][Migration Strategies]]
  - [[A Simple Example][A Simple Example]]
  - [[Mixing Classpath and Module Path][Mixing Classpath and Module Path]]
  - [[Automatic Modules][Automatic Modules]]
  - [[Open Packages][Open Packages]]
  - [[Open Modules][Open Modules]]
  - [[VM Arguments to Break Encapsulation][VM Arguments to Break Encapsulation]]
  - [[Automatic Modules and the Classpath][Automatic Modules and the Classpath]]
  - [[Using jdeps][Using jdeps]]
  - [[Loading Code Dynamically][Loading Code Dynamically]]
  - [[Split Packages][Split Packages]]
- [[9. Migration Case Study: Spring and Hibernate][9. Migration Case Study: Spring and Hibernate]]
  - [[Getting Familiar with the Application][Getting Familiar with the Application]]
  - [[Running on the Classpath with Java 9][Running on the Classpath with Java 9]]
  - [[Setting Up for Modules][Setting Up for Modules]]
  - [[Using Automatic Modules][Using Automatic Modules]]
  - [[Java Platform Dependencies and Automatic Modules][Java Platform Dependencies and Automatic Modules]]
  - [[Opening Packages for Reflection][Opening Packages for Reflection]]
  - [[Fixing Illegal Access][Fixing Illegal Access]]
  - [[Refactor to Multiple Modules][Refactor to Multiple Modules]]
- [[10. Library Migration][10. Library Migration]]
  - [[Before Modularization][Before Modularization]]
  - [[Choosing a Library Module Name][Choosing a Library Module Name]]
  - [[Creating a Module Descriptor][Creating a Module Descriptor]]
  - [[Updating a Library with a Module Descriptor][Updating a Library with a Module Descriptor]]
  - [[Targeting Older Java Versions][Targeting Older Java Versions]]
  - [[Library Module Dependencies][Library Module Dependencies]]
    - [[Internal Dependencies][Internal Dependencies]]
    - [[External Dependencies][External Dependencies]]
  - [[Targeting Multiple Java Versions][Targeting Multiple Java Versions]]
    - [[Multi-Release JARs][Multi-Release JARs]]
    - [[Modular Multi-Release JARs][Modular Multi-Release JARs]]
- [[III. Modular Development Tooling][III. Modular Development Tooling]]
- [[11. Build Tools and IDEs][11. Build Tools and IDEs]]
  - [[Apache Maven][Apache Maven]]
    - [[Multimodule Projects][Multimodule Projects]]
    - [[EasyText with Apache Maven][EasyText with Apache Maven]]
    - [[Running a Modular Application with Apache Maven][Running a Modular Application with Apache Maven]]
  - [[Gradle][Gradle]]
  - [[IDEs][IDEs]]
- [[12. Testing Modules][12. Testing Modules]]
  - [[Blackbox Tests][Blackbox Tests]]
  - [[Blackbox Tests with JUnit][Blackbox Tests with JUnit]]
  - [[Whitebox Tests][Whitebox Tests]]
  - [[Test Tooling][Test Tooling]]
- [[13. Scaling Down with Custom Runtime Images][13. Scaling Down with Custom Runtime Images]]
  - [[Static Versus Dynamic Linking][Static Versus Dynamic Linking]]
  - [[Using jlink][Using jlink]]
  - [[Finding the Right Service Provider Modules][Finding the Right Service Provider Modules]]
  - [[Module Resolution During Linking][Module Resolution During Linking]]
  - [[jlink for Classpath-Based Applications][jlink for Classpath-Based Applications]]
  - [[Reducing Size][Reducing Size]]
  - [[Improving Performance][Improving Performance]]
  - [[Cross-Targeting Runtime Images][Cross-Targeting Runtime Images]]
- [[14. A Modular Future][14. A Modular Future]]
  - [[OSGi][OSGi]]
  - [[Java EE][Java EE]]
  - [[Microservices][Microservices]]
  - [[Next Steps][Next Steps]]
- [[Index][Index]]

* Foreword
* Preface
** Who Should Read This Book
** Why We Wrote This Book
** Navigating This Book
** Using Code Examples
** Conventions Used in This Book
** O’Reilly Safari
** How to Contact Us
** Acknowledgments

* I. Introduction to the Java Module System
* 1. Modularity Matters
** What Is Modularity?
** Before Java 9
*** JARs as Modules?
*** Classpath Hell

** Java 9 Modules

* 2. Modules and the Modular JDK
** The Modular JDK
** Module Descriptors
** Readability
** Accessibility
** Implied Readability
** Qualified Exports
** Module Resolution and the Module Path
** Using the Modular JDK Without Modules

* 3. Working with Modules
** Your First Module
*** Anatomy of a Module
*** Naming Modules
*** Compilation
*** Packaging
*** Running Modules
*** Module Path
*** Linking Modules

** No Module Is an Island
*** Introducing the EasyText Example
*** A Tale of Two Modules

** Working with Platform Modules
*** Finding the Right Platform Module
*** Creating a GUI Module

** The Limits of Encapsulation
*** Interfaces and Instantiation

* 4. Services
** Factory Pattern
** Services for Implementation Hiding
*** Providing Services
*** Consuming Services
*** Service Life Cycle
*** Service Provider Methods

** Factory Pattern Revisited
** Default Service Implementations
** Service Implementation Selection
*** Service Type Inspection and Lazy Instantiation

** Module Resolution with Service Binding
** Services and Linking

* 5. Modularity Patterns
** Determining Module Boundaries
** Lean Modules
** API Modules
*** What Should Be in an API Module?
*** Implied Readability
*** API Module with a Default Implementation

** Aggregator Modules
*** Building a Facade over Modules
*** Safely Splitting a Module

** Avoiding Cyclic Dependencies
*** Split Packages
*** Breaking Cycles

** Optional Dependencies
*** Compile-Time Dependencies
*** Implementing Optional Dependencies with Services

** Versioned Modules
*** Module Resolution and Versioning

** Resource Encapsulation
*** Loading Resources from a Module
*** Loading Resources Across Modules
*** Working with ResourceBundles

* 6. Advanced Modularity Patterns
** Strong Encapsulation Revisited
*** Deep Reflection
*** Open Modules and Packages
*** Dependency Injection

** Reflection on Modules
*** Introspection
*** Modifying Modules
*** Annotations

** Container Application Patterns
*** Layers and Configurations
*** Classloading in Layers
*** Plug-in Architectures
*** Container Architectures
*** Resolving Platform Modules in Containers

* II. Migration
* 7. Migration Without Modules
** The Classpath Is Dead, Long Live the Classpath
** Libraries, Strong Encapsulation, and the JDK 9 Classpath
** Compilation and Encapsulated APIs
** Removed Types
** Using JAXB and Other Java EE APIs
** The jdk.unsupported Module
** Other Changes

* 8. Migration to Modules
** Migration Strategies
** A Simple Example
** Mixing Classpath and Module Path
** Automatic Modules
** Open Packages
** Open Modules
** VM Arguments to Break Encapsulation
** Automatic Modules and the Classpath
** Using jdeps
** Loading Code Dynamically
** Split Packages

* 9. Migration Case Study: Spring and Hibernate
** Getting Familiar with the Application
** Running on the Classpath with Java 9
** Setting Up for Modules
** Using Automatic Modules
** Java Platform Dependencies and Automatic Modules
** Opening Packages for Reflection
** Fixing Illegal Access
** Refactor to Multiple Modules

* 10. Library Migration
** Before Modularization
** Choosing a Library Module Name
** Creating a Module Descriptor
** Updating a Library with a Module Descriptor
** Targeting Older Java Versions
** Library Module Dependencies
*** Internal Dependencies
*** External Dependencies

** Targeting Multiple Java Versions
*** Multi-Release JARs
*** Modular Multi-Release JARs

* III. Modular Development Tooling
* 11. Build Tools and IDEs
** Apache Maven
*** Multimodule Projects
*** EasyText with Apache Maven
*** Running a Modular Application with Apache Maven

** Gradle
** IDEs

* 12. Testing Modules
** Blackbox Tests
** Blackbox Tests with JUnit
** Whitebox Tests
** Test Tooling

* 13. Scaling Down with Custom Runtime Images
** Static Versus Dynamic Linking
** Using jlink
** Finding the Right Service Provider Modules
** Module Resolution During Linking
** jlink for Classpath-Based Applications
** Reducing Size
** Improving Performance
** Cross-Targeting Runtime Images

* 14. A Modular Future
** OSGi
** Java EE
** Microservices
** Next Steps

* Index
