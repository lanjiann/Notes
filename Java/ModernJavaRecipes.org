#+TITLE: Modern Java Recipes
#+SUBTITLE: Simple Solutions to Difficult Problems in Java 8 and 9
#+VERSION: 2017
#+AUTHOR: Ken Kousen
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Foreword - ix][Foreword - ix]]
- [[Preface - xi][Preface - xi]]
- [[1. The Basics - 1][1. The Basics - 1]]
  - [[1.1 Lambda Expressions 2][1.1 Lambda Expressions 2]]
  - [[1.2 Method References 6][1.2 Method References 6]]
  - [[1.3 Constructor References 10][1.3 Constructor References 10]]
  - [[1.4 Functional Interfaces 15][1.4 Functional Interfaces 15]]
  - [[1.5 Default Methods in Interfaces 18][1.5 Default Methods in Interfaces 18]]
  - [[1.6 Static Methods in Interfaces 21][1.6 Static Methods in Interfaces 21]]
- [[2. The ~java.util.function~ Package - 25][2. The ~java.util.function~ Package - 25]]
  - [[2.1 Consumers 26][2.1 Consumers 26]]
  - [[2.2 Suppliers 28][2.2 Suppliers 28]]
  - [[2.3 Predicates 31][2.3 Predicates 31]]
  - [[2.4 Functions 35][2.4 Functions 35]]
- [[3. Streams - 39][3. Streams - 39]]
  - [[3.1 Creating Streams 39][3.1 Creating Streams 39]]
  - [[3.2 Boxed Streams 43][3.2 Boxed Streams 43]]
  - [[3.3 Reduction Operations Using Reduce 46][3.3 Reduction Operations Using Reduce 46]]
  - [[3.4 Check Sorting Using Reduce 55][3.4 Check Sorting Using Reduce 55]]
  - [[3.5 Debugging Streams with peek 57][3.5 Debugging Streams with peek 57]]
  - [[3.6 Converting Strings to Streams and Back 60][3.6 Converting Strings to Streams and Back 60]]
  - [[3.7 Counting Elements 63][3.7 Counting Elements 63]]
  - [[3.8 Summary Statistics 65][3.8 Summary Statistics 65]]
  - [[3.9 Finding the First Element in a Stream 68][3.9 Finding the First Element in a Stream 68]]
  - [[3.10 Using anyMatch, allMatch, and noneMatch 73][3.10 Using anyMatch, allMatch, and noneMatch 73]]
  - [[3.11 Stream flatMap Versus map 75][3.11 Stream flatMap Versus map 75]]
  - [[3.12 Concatenating Streams 79][3.12 Concatenating Streams 79]]
  - [[3.13 Lazy Streams 83][3.13 Lazy Streams 83]]
- [[4. Comparators and Collectors - 87][4. Comparators and Collectors - 87]]
  - [[4.1 Sorting Using a Comparator 87][4.1 Sorting Using a Comparator 87]]
  - [[4.2 Converting a Stream into a Collection 91][4.2 Converting a Stream into a Collection 91]]
  - [[4.3 Adding a Linear Collection to a Map 94][4.3 Adding a Linear Collection to a Map 94]]
  - [[4.4 Sorting Maps 97][4.4 Sorting Maps 97]]
  - [[4.5 Partitioning and Grouping 100][4.5 Partitioning and Grouping 100]]
  - [[4.6 Downstream Collectors 102][4.6 Downstream Collectors 102]]
  - [[4.7 Finding Max and Min Values 104][4.7 Finding Max and Min Values 104]]
  - [[4.8 Creating Immutable Collections 107][4.8 Creating Immutable Collections 107]]
  - [[4.9 Implementing the Collector Interface 109][4.9 Implementing the Collector Interface 109]]
- [[5. Issues with ~Streams~, Lambdas, and Method References - 115][5. Issues with ~Streams~, Lambdas, and Method References - 115]]
  - [[5.1 The ~java.util.Objects~ Class 115][5.1 The ~java.util.Objects~ Class 115]]
  - [[5.2 Lambdas and Effectively Final 117][5.2 Lambdas and Effectively Final 117]]
  - [[5.3 Streams of Random Numbers 120][5.3 Streams of Random Numbers 120]]
  - [[5.4 Default Methods in Map 122][5.4 Default Methods in Map 122]]
  - [[5.5 Default Method Conflict 127][5.5 Default Method Conflict 127]]
  - [[5.6 Iterating Over Collections and Maps 130][5.6 Iterating Over Collections and Maps 130]]
  - [[5.7 Logging with a Supplier 132][5.7 Logging with a Supplier 132]]
  - [[5.8 Closure Composition 134][5.8 Closure Composition 134]]
  - [[5.9 Using an Extracted Method for Exception Handling 138][5.9 Using an Extracted Method for Exception Handling 138]]
  - [[5.10 Checked Exceptions and Lambdas 141][5.10 Checked Exceptions and Lambdas 141]]
  - [[5.11 Using a Generic Exception Wrapper 144][5.11 Using a Generic Exception Wrapper 144]]
- [[6. The ~Optional~ Type - 147][6. The ~Optional~ Type - 147]]
  - [[6.1 Creating an ~Optional~ 148][6.1 Creating an ~Optional~ 148]]
  - [[6.2 Retrieving Values from an ~Optional~ 150][6.2 Retrieving Values from an ~Optional~ 150]]
  - [[6.3 ~Optional~ in Getters and Setters 154][6.3 ~Optional~ in Getters and Setters 154]]
  - [[6.4 ~Optional~ ~flatMap~ Versus ~map~ 156][6.4 ~Optional~ ~flatMap~ Versus ~map~ 156]]
  - [[6.5 Mapping Optionals 160][6.5 Mapping Optionals 160]]
- [[7. File I/O - 165][7. File I/O - 165]]
  - [[7.1 Process Files 166][7.1 Process Files 166]]
  - [[7.2 Retrieving Files as a Stream 169][7.2 Retrieving Files as a Stream 169]]
  - [[7.3 Walking the Filesystem 170][7.3 Walking the Filesystem 170]]
  - [[7.4 Searching the Filesystem 172][7.4 Searching the Filesystem 172]]
- [[8. The java.time Package - 175][8. The java.time Package - 175]]
  - [[8.1 Using the Basic Date-Time Classes 176][8.1 Using the Basic Date-Time Classes 176]]
  - [[8.2 Creating Dates and Times from Existing Instances 180][8.2 Creating Dates and Times from Existing Instances 180]]
  - [[8.3 Adjusters and Queries 185][8.3 Adjusters and Queries 185]]
  - [[8.4 Convert from java.util.Date to java.time.LocalDate 190][8.4 Convert from java.util.Date to java.time.LocalDate 190]]
  - [[8.5 Parsing and Formatting 194][8.5 Parsing and Formatting 194]]
  - [[8.6 Finding Time Zones with Unusual Offsets 197][8.6 Finding Time Zones with Unusual Offsets 197]]
  - [[8.7 Finding Region Names from Offsets 200][8.7 Finding Region Names from Offsets 200]]
  - [[8.8 Time Between Events 202][8.8 Time Between Events 202]]
- [[9. Parallelism and Concurrency - 205][9. Parallelism and Concurrency - 205]]
  - [[9.1 Converting from Sequential to Parallel Streams 206][9.1 Converting from Sequential to Parallel Streams 206]]
  - [[9.2 When Parallel Helps 209][9.2 When Parallel Helps 209]]
  - [[9.3 Changing the Pool Size 215][9.3 Changing the Pool Size 215]]
  - [[9.4 The Future Interface 217][9.4 The Future Interface 217]]
  - [[9.5 Completing a CompletableFuture 220][9.5 Completing a CompletableFuture 220]]
  - [[9.6 Coordinating CompletableFutures, Part 1 225][9.6 Coordinating CompletableFutures, Part 1 225]]
  - [[9.7 Coordinating CompletableFutures, Part 2 231][9.7 Coordinating CompletableFutures, Part 2 231]]
- [[10. Java 9 Additions - 239][10. Java 9 Additions - 239]]
  - [[10.1 Modules in Jigsaw - 240][10.1 Modules in Jigsaw - 240]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
      - [[Modules][Modules]]
    - [[See Also][See Also]]
  - [[10.2 Private Methods in Interfaces 245][10.2 Private Methods in Interfaces 245]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
  - [[10.3 Creating Immutable Collections 247][10.3 Creating Immutable Collections 247]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
    - [[See Also][See Also]]
  - [[10.4 Stream: ofNullable, iterate, takeWhile, and dropWhile 252][10.4 Stream: ofNullable, iterate, takeWhile, and dropWhile 252]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
    - [[See Also][See Also]]
  - [[10.5 Downstream Collectors: filtering and flatMapping 255][10.5 Downstream Collectors: filtering and flatMapping 255]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
    - [[See Also][See Also]]
  - [[10.6 ~Optional~: stream, or, ~ifPresentOrElse~ 259][10.6 ~Optional~: stream, or, ~ifPresentOrElse~ 259]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
    - [[See Also][See Also]]
  - [[10.7 Date Ranges 262][10.7 Date Ranges 262]]
    - [[Problem][Problem]]
    - [[Solution][Solution]]
    - [[Discussion][Discussion]]
    - [[See Also][See Also]]
- [[A. Generics and Java 8 - 267][A. Generics and Java 8 - 267]]
- [[Index - 287][Index - 287]]

* TODO Foreword - ix
* TODO Preface - xi
* TODO 1. The Basics - 1
** 1.1 Lambda Expressions 2
** 1.2 Method References 6
** 1.3 Constructor References 10
** 1.4 Functional Interfaces 15
** 1.5 Default Methods in Interfaces 18
** 1.6 Static Methods in Interfaces 21

* TODO 2. The ~java.util.function~ Package - 25
** 2.1 Consumers 26
** 2.2 Suppliers 28
** 2.3 Predicates 31
** 2.4 Functions 35

* TODO 3. Streams - 39
** 3.1 Creating Streams 39
** 3.2 Boxed Streams 43
** 3.3 Reduction Operations Using Reduce 46
** 3.4 Check Sorting Using Reduce 55
** 3.5 Debugging Streams with peek 57
** 3.6 Converting Strings to Streams and Back 60
** 3.7 Counting Elements 63
** 3.8 Summary Statistics 65
** 3.9 Finding the First Element in a Stream 68
** 3.10 Using anyMatch, allMatch, and noneMatch 73
** 3.11 Stream flatMap Versus map 75
** 3.12 Concatenating Streams 79
** 3.13 Lazy Streams 83

* TODO 4. Comparators and Collectors - 87
** 4.1 Sorting Using a Comparator 87
** 4.2 Converting a Stream into a Collection 91
** 4.3 Adding a Linear Collection to a Map 94
** 4.4 Sorting Maps 97
** 4.5 Partitioning and Grouping 100
** 4.6 Downstream Collectors 102
** 4.7 Finding Max and Min Values 104
** 4.8 Creating Immutable Collections 107
** 4.9 Implementing the Collector Interface 109

* TODO 5. Issues with ~Streams~, Lambdas, and Method References - 115
** 5.1 The ~java.util.Objects~ Class 115
** 5.2 Lambdas and Effectively Final 117
** 5.3 Streams of Random Numbers 120
** 5.4 Default Methods in Map 122
** 5.5 Default Method Conflict 127
** 5.6 Iterating Over Collections and Maps 130
** 5.7 Logging with a Supplier 132
** 5.8 Closure Composition 134
** 5.9 Using an Extracted Method for Exception Handling 138
** 5.10 Checked Exceptions and Lambdas 141
** 5.11 Using a Generic Exception Wrapper 144

* TODO 6. The ~Optional~ Type - 147
** 6.1 Creating an ~Optional~ 148
** 6.2 Retrieving Values from an ~Optional~ 150
** 6.3 ~Optional~ in Getters and Setters 154
** 6.4 ~Optional~ ~flatMap~ Versus ~map~ 156
** 6.5 Mapping Optionals 160

* TODO 7. File I/O - 165
** 7.1 Process Files 166
** 7.2 Retrieving Files as a Stream 169
** 7.3 Walking the Filesystem 170
** 7.4 Searching the Filesystem 172

* TODO 8. The java.time Package - 175
** 8.1 Using the Basic Date-Time Classes 176
** 8.2 Creating Dates and Times from Existing Instances 180
** 8.3 Adjusters and Queries 185
** 8.4 Convert from java.util.Date to java.time.LocalDate 190
** 8.5 Parsing and Formatting 194
** 8.6 Finding Time Zones with Unusual Offsets 197
** 8.7 Finding Region Names from Offsets 200
** 8.8 Time Between Events 202

* TODO 9. Parallelism and Concurrency - 205
** 9.1 Converting from Sequential to Parallel Streams 206
** 9.2 When Parallel Helps 209
** 9.3 Changing the Pool Size 215
** 9.4 The Future Interface 217
** 9.5 Completing a CompletableFuture 220
** 9.6 Coordinating CompletableFutures, Part 1 225
** 9.7 Coordinating CompletableFutures, Part 2 231

* TODO 10. Java 9 Additions - 239
  - This chapter contains recipes involving the *new additions*, like
    + ~private~ /methods/ in /interfaces/
    + /factory methods/ for /immutable collections/
    + the new methods for /streams/, ~Optional~, and ~Collectors~.

  - What *NOT covered* in this chapter
    + The ~jshell~ interactive console
    + The *modified* (=From Jian= =???=) ~try-with-resources~ block
    + The relaxed syntax for the diamond operator =TODO= =???=
    + The *new* /deprecation warnings/ =TODO=
    + The /reactive streams classes/ =TODO=
    + The stack-walking API =TODO=
    + The revised ~Process~ /class/ =TODO=

  - Several are relatively minor (like the diamond operator changes, try-withresources
    requirements, and deprecation warnings). Some are specialty topics (like
    the stack-walking API and the changes to the Process API). The new shell is covered
    heavily in the documentation, along with a tutorial.
    Finally, the reactive streams additions are fascinating, but the open source community
    already provides APIs like Reactive Streams, RxJava, and more, and it might be a
    good idea to wait to see how the community decides to support the new Java 9 API.

  - The recipes in this chapter is NOT use-case driven as in the rest of this
    book.

** TODO 10.1 Modules in Jigsaw - 240
*** DONE Problem
    CLOSED: [2018-01-19 Fri 03:58]
    - *Access* Java /modules/ from the _standard library_.

    - *Encapsulate* your own code in /modules/.

*** TODO Solution
    - =TODO=

*** TODO Discussion
    - JSR 376 -- the Java Platform Module System.

    - Q: What are changed by the /Java Platform Module System/?
      A: For example, it changes the nature of ~public~ and ~private~.

    - As a concession, Java 9 has a *default* command-line flag
      ~--illegal-access=permit~. *It will be disallowed in the feature release*.

**** TODO Modules
     - The ~module-info.java~ file is known as a /module descriptor/.

     - *NOTE*:
       The *reversed URL* pattern is currently the *recommended naming
       convention* for /modules/.

     - The *ONLY* /module/ provided by Java 9 JVM *by default* is ~java.base~.

*** TODO See Also

** DONE 10.2 Private Methods in Interfaces 245
   CLOSED: [2018-01-19 Fri 05:12]
*** DONE Problem
    CLOSED: [2018-01-19 Fri 04:22]
    You want to add ~private~ /methods/ to /interfaces/ that _can be called by
    other /methods/ in the /interface/._

*** DONE Solution
    CLOSED: [2018-01-19 Fri 04:22]
    Java SE 9 now *supports* using the ~private~ keyword on /interface methods/.

*** DONE Discussion
    CLOSED: [2018-01-19 Fri 05:12]
    - In Java SE 8,
      1. for the _FIRST TIME_ developers could _add_ *implementations* to
         /interface methods/, labeling them as ~default~ or ~static~. =TODO=

      2. The next logical step was to _add_ /private methods/ as well.

    - In Java, all the /private methods/
      + use the ~private~ keywrod;

      + MUST have an *implementation* -- in another words, MUSTN'T be /abstract
        method/.

      + Like /private methods/ in /classes/, they *CANNOT* be _overridden_.
        The can be *ONLY* invoked from within the same source file.

    - Example

      =From Jian= NOT a good way to use /interfaces/. A better example should be
      created.

      #+BEGIN_SRC java
        // Example 10-8. Private method in an interface
        import java.util.function.IntPredicate;
        import java.util.stream.IntStream;

        public interface SumNumbers {
            default int addEvens(int... nums) {
                return add(n -> n % 2 == 0, nums);
            }
            default int addOdds(int... nums) {
                return add(n -> n % 2 != 0, nums);
            }
            private int add(IntPredicate predicate, int... nums) {
                return IntStream.of(nums).
                         filter(predicate).
                         sum();
            }
        }


        // Example 10-9. Testing the private interface method
        class PrivateDemo implements SumNumbers {}

        import org.junit.Test;
        import static org.junit.Assert.*;

        public class SumNumbersTest {
            private SumNumbers demo = new PrivateDemo();

            @Test
            public void addEvens() throws Exception {
                assertEquals(2 + 4 + 6, demo.addEvens(1, 2, 3, 4, 5, 6));
                //                      |<---------------------------->|
            }

            @Test
            public void addOdds() throws Exception {
                assertEquals(1 + 3 + 5, demo.addOdds(1, 2, 3, 4, 5, 6));
                //                      |<--------------------------->|
            }
        }
      #+END_SRC

** 10.3 Creating Immutable Collections 247
*** DONE Problem
    CLOSED: [2018-01-19 Fri 05:11]
    Create *immutable* /lists/, /sets/, or /maps/.

*** DONE Solution
    CLOSED: [2018-01-19 Fri 05:11]
    Use the Java 9 new added /static factory methods/:
    + ~List.of~
    + ~Set.of~
    + ~Map.of~

*** TODO Discussion
*** TODO See Also

** 10.4 Stream: ofNullable, iterate, takeWhile, and dropWhile 252
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

** 10.5 Downstream Collectors: filtering and flatMapping 255
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

** 10.6 ~Optional~: stream, or, ~ifPresentOrElse~ 259
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

** 10.7 Date Ranges 262
*** TODO Problem
*** TODO Solution
*** TODO Discussion
*** TODO See Also

* TODO A. Generics and Java 8 - 267
* Index - 287
