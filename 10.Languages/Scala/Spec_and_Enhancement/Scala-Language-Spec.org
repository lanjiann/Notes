#+TITLE: Scala Language Specification
#+VERSION: 2.13
#+STARTUP: entitiespretty

* Authors and Contributors
  Martin Odersky, Philippe Altherr, Vincent Cremet, Gilles Dubochet, Burak Emir,
  Philipp Haller, St√©phane Micheloud, Nikolay Mihaylov, Adriaan Moors, Lukas
  Rytz, Michel Schinz, Erik Stenman, Matthias Zenger

  - Markdown Conversion by Iain McGinniss.

* Preface
* TODO 1. Lexical Syntax
** 1 Identifiers
** 2 Newline Characters
** 3 Literals
*** 1 Integer Literals
*** 2 Floating Point Literals
*** 3 Boolean Literals
*** 4 Character Literals
*** 5 String Literals
*** 6 Escape Sequences
*** 7 Symbol literals

** 4 Whitespace and Comments
** 5 Trailing Commas in Multi-line Expressions
** 6 XML mode

* TODO 2. Identifiers, Names and Scopes
* TODO 3. Types
** 1 Paths
** 2 Value Types
*** 1 Singleton Types
*** 2 Literal Types
*** 3 Stable Types
*** 4 Type Projection
*** 5 Type Designators
*** 6 Parameterized Types
*** 7 Tuple Types
*** 8 Annotated Types
*** 9 Compound Types
*** 10 Infix Types
*** 11 Function Types
*** 12 Existential Types

** 3 Non-Value Types
*** 1 Method Types
*** 2 Polymorphic Method Types
*** 3 Type Constructors

** 4 Base Types and Member Definitions
** 5 Relations between types
*** 1 Equivalence
*** 2 Conformance
*** 3 Weak Conformance
*** 4 Compatibility

** 6 Volatile Types
** 7 Type Erasure

* TODO 4. Basic Declarations and Definitions
** 1 Value Declarations and Definitions
** 2 Variable Declarations and Definitions
** 3 Type Declarations and Type Aliases
** 4 Type Parameters
** 5 Variance Annotations
** 6 Function Declarations and Definitions
*** 1 Default Arguments
*** 2 By-Name Parameters
*** 3 Repeated Parameters
*** 4 Procedures
*** 5 Method Return Type Inference

** 7 Import Clauses

* TODO 5. Classes and Objects
** 1 Templates
*** 1 Constructor Invocations
*** 2 Class Linearization
*** 3 Class Members
*** 4 Overriding
*** 5 Inheritance Closure
*** 6 Early Definitions

** 2 Modifiers
*** 1 private
*** 2 protected
*** 3 override
*** 4 abstract override
*** 5 abstract
*** 6 final
*** 7 sealed
*** 8 lazy

** 3 Class Definitions
*** 1 Constructor Definitions
*** 2 Case Classes

** 4 Traits
** 5 Object Definitions

* TODO 6. Expressions
** 1 Expression Typing
** 2 Literals
** 3 The Null Value
** 4 Designators
** 5 This and Super
** 6 Function Applications
*** 1 Named and Default Arguments
*** 2 Signature Polymorphic Methods

** 7 Method Values
** 8 Type Applications
** 9 Tuples
** 10 Instance Creation Expressions
** 11 Blocks
** 12 Prefix, Infix, and Postfix Operations
*** 1 Prefix Operations
*** 2 Postfix Operations
*** 3 Infix Operations
*** 4 Assignment Operators

** 13 Typed Expressions
** 14 Annotated Expressions
** 15 Assignments
** 16 Conditional Expressions
** 17 While Loop Expressions
** 18 Do Loop Expressions
** 19 For Comprehensions and For Loops
** 20 Return Expressions
** 21 Throw Expressions
** 22 Try Expressions
** 23 Anonymous Functions
*** 1 Translation
*** 2 Placeholder Syntax for Anonymous Functions

** 24 Constant Expressions
** 25 Statements
** 26 Implicit Conversions
*** 1 Value Conversions
*** 2 Method Conversions
*** 3 Overloading Resolution
*** 4 Local Type Inference
*** 5 Eta Expansion
*** 6 Dynamic Member Selection

* TODO 7. Implicits
** DONE 7.1 The Implicit Modifier
   CLOSED: [2019-04-26 Fri 00:43]
   #+begin_src python
     LocalModifier ::= 'implicit'
     ParamClauses  ::= {ParamClause} [nl] '(' 'implicit' Params ')'
   #+end_src

   - /Template members and parameters/ labeled with an ~implicit~ /modifier/
     can be passed to /implicit parameters/
     and
     can be used as /implicit conversions/ called /views/.

   - The ~implicit~ /modifier/ is *illegal* for _ALL_ /type members/,
     as well as for /top-level objects/.

   - Example ~Monoid~:
     #+begin_src scala
       abstract class Monoid[A] extends SemiGroup[A] {
         def unit: A
         def add(x: A, y: A): A
       }

       object Monoids {
         implicit object stringMonoid extends Monoid[String] {
           def add(x: String, y: String): String = x concat y
           def unit: String = ""
         }

         implicit object intMonoid extends Monoid[Int] {
           def add(x: Int, y: Int): Int = x + y
           def unit: Int = 0
         }
       }
     #+end_src

** TODO 7.2 Implicit Parameters
   - An /implicit parameter list/ (~implicit p1, ..., pn~) of a method marks the
     parameters ~p1, ...,pn~ as /implicit/.

     + Rules / Restrictions:
       A /method/ or /constructor/ can have *only one* /implicit parameter list/,
       and it *must be the last* /parameter list/ given.

       =from Jian=
       This implies only one /parameter list/ or the last one in /curring/ form

   - 

** 7.3 Views
** 7.4 Context Bounds and View Bounds
** 7.5 Manifests 

* TODO 8. Pattern Matching
** 1 Patterns
*** 1 Variable Patterns
*** 2 Typed Patterns
*** 3 Pattern Binders
*** 4 Literal Patterns
*** 5 Interpolated string patterns
*** 6 Stable Identifier Patterns
*** 7 Constructor Patterns
*** 8 Tuple Patterns
*** 9 Extractor Patterns
*** 10 Pattern Sequences
*** 11 Infix Operation Patterns
*** 12 Pattern Alternatives
*** 13 XML Patterns
*** 14 Regular Expression Patterns
*** 15 Irrefutable Patterns

** 2 Type Patterns
** 3 Type Parameter Inference in Patterns
*** 1 Type parameter inference for typed patterns
*** 2 Type parameter inference for constructor patterns

** 4 Pattern Matching Expressions
** 5 Pattern Matching Anonymous Functions

* TODO 9. Top-Level Definitions
** 1 Compilation Units
** 2 Packagings
** 3 Package Objects
** 4 Package References
** 5 Programs

* TODO 10. XML
** 1 XML expressions
** 2 XML patterns

* TODO 11. Annotations
** 1 Definition
** 2 Predefined Annotations
*** 1 Java Platform Annotations
*** 2 Java Beans Annotations
*** 3 Deprecation Annotations
*** 4 Scala Compiler Annotations

** 3 User-defined Annotations
** 3 Host-platform Annotations

* TODO 12. Standard Library
** 1 Root Classes
** 2 Value Classes
*** 1 Numeric Value Types
*** 2 Class Boolean
*** 3 Class Unit

** 3 Standard Reference Classes
*** 1 Class String
*** 2 The Tuple classes
*** 3 The Function Classes
*** 4 Class Array

** 4 Class Node
** 5 The Predef Object
*** 1 Predefined Implicit Definitions

* TODO 13. Syntax Summary
** 1. Lexical Syntax
** 2. Context-free Syntax

* TODO 14. References
  - TODO (see comments in markdown source)

* TODO 15. Changelog 
** 1 Changes in Version 2.8.0
** 2 Changes in Version 2.8
** 3 Changes in Version 2.7.2
** 4 Changes in Version 2.7.1
** 5 Changes in Version 2.7.0
** 6 Changes in Version 2.6.1
** 7 Changes in Version 2.6
** 8 Changes in Version 2.5
** 9 Changes in Version 2.4
** 10 Changes in Version 2.3.2
** 11 Changes in Version 2.3
** 12 Changes in Version 2.1.8
** 13 Changes in Version 2.1.7
** 14 Changes in Version 2.1.5
** 15 Changes in Version 2.0
