#+TITLE: Scala Language Specification
#+VERSION: 2.13
#+STARTUP: entitiespretty

* Authors and Contributors
  Martin Odersky, Philippe Altherr, Vincent Cremet, Gilles Dubochet, Burak Emir,
  Philipp Haller, St√©phane Micheloud, Nikolay Mihaylov, Adriaan Moors, Lukas
  Rytz, Michel Schinz, Erik Stenman, Matthias Zenger

  - Markdown Conversion by Iain McGinniss.

* Preface
* TODO 1. Lexical Syntax
** 1.1 Identifiers
** 1.2 Newline Characters
** 1.3 Literals
*** 1.3.1 Integer Literals
*** 1.3.2 Floating Point Literals
*** 1.3.3 Boolean Literals
*** 1.3.4 Character Literals
*** 1.3.5 String Literals
**** Multi-Line String Literals
**** Interpolated string

*** 1.3.6 Escape Sequences
*** 1.3.7 Symbol literals

** 1.4 Whitespace and Comments
** 1.5 Trailing Commas in Mult-line Expressions
** 1.6 XML mode

* TODO 2. Identifiers, Names and Scopes
* TODO 3. Types
** 3.1 Paths
** 3.2 Value Types
*** 3.2.1 Singleton Types
*** 3.2.2 Literal Types
*** 3.2.3 Stable Types
*** 3.2.4 Type Projection
*** 3.2.5 Type Designators
*** 3.2.6 Parameterized Types
*** 3.2.7 Tuple Types
*** 3.2.8 Annotated Types
*** 3.2.9 Compound Types
*** 3.2.10 Infix Types
*** 3.2.11 Function Types
*** 3.2.12 Existential Types
**** Simplification Rules
**** Existential Quantification over Values
**** Placeholder Syntax for Existential Types

** 3.3 Non-Value Types
*** 3.3.1 Method Types
*** 3.3.2 Polymorphic Method Types
*** 3.3.3 Type Constructors

** 3.4 Base Types and Member Definitions
** 3.5 Relations between types
*** 3.5.1 Equivalence
*** 3.5.2 Conformance
**** Least upper bounds and greatest lower bounds

*** 3.5.3 Weak Conformance
*** 3.5.4 Compatibility
**** Examples

** 3.6 Volatile Types
** 3.7 Type Erasure

* TODO 4. Basic Declarations and Definitions
** 4.1 Value Declarations and Definitions
** 4.2 Variable Declarations and Definitions
** 4.3 Type Declarations and Type Aliases
** 4.4 Type Parameters
** 4.5 Variance Annotations
** 4.6 Function Declarations and Definitions
*** 4.6.1 Default Arguments
*** 4.6.2 By-Name Parameters
*** 4.6.3 Repeated Parameters
*** 4.6.4 Procedures
*** 4.6.5 Method Return Type Inference

** 4.7 Import Clauses

* TODO 5. Classes and Objects
** 5.1 Templates
**** Inheriting from Java Types
**** Template Evaluation

*** 5.1.1 Constructor Invocations
*** 5.1.2 Class Linearization
*** 5.1.3 Class Members
*** 5.1.4 Overriding
*** 5.1.5 Inheritance Closure
*** 5.1.6 Early Definitions

** 5.2 Modifiers
*** 5.2.1 ~private~
*** 5.2.2 ~protected~
*** 5.2.3 ~override~
*** 5.2.4 ~abstract override~
*** 5.2.5 ~abstract~
*** 5.2.6 ~final~
*** 5.2.7 ~sealed~
*** 5.2.8 ~lazy~

** 5.3 Class Definitions
*** 5.3.1 Constructor Definitions
*** 5.3.2 Case Classes

** 5.4 Traits
** 5.5 Object Definitions

* TODO 6. Expressions
** 6.1 Expression Typing
** 6.2 Literals
** 6.3 The Null Value
** 6.4 Designators
** 6.5 This and Super
** 6.6 Function Applications
*** 6.6.1 Named and Default Arguments
*** 6.6.2 Signature Polymorphic Methods

** 6.7 Method Values
** 6.8 Type Applications
** 6.9 Tuples
** 6.10 Instance Creation Expressions
** 6.11 Blocks
** 6.12 Prefix, Infix, and Postfix Operations
*** 6.12.1 Prefix Operations
*** 6.12.2 Postfix Operations
*** 6.12.3 Infix Operations
*** 6.12.4 Assignment Operators

** 6.13 Typed Expressions
** 6.14 Annotated Expressions
** 6.15 Assignments
** 6.16 Conditional Expressions
** 6.17 While Loop Expressions
** 6.18 Do Loop Expressions
** 6.19 For Comprehensions and For Loops
** 6.20 Return Expressions
** 6.21 Throw Expressions
** 6.22 Try Expressions
** 6.23 Anonymous Functions
*** 6.23.1 Translation
*** 6.23.2 Placeholder Syntax for Anonymous Functions

** 6.24 Constant Expressions
   - Constant expressions :: expressions that the Scala compiler can evaluate to
                             a constant.
     + The definition of "constant expression" depends on the platform TODO ???

   - Even though the definition of /constant expression/ depends on the platform,
     they _Include AT LEAST_ the expressions of the following forms:
     + A literal of a value class, such as an integer
     + A string literal
     + A class constructed with ~Predef.classOf~ TODO ???
     + An element of an enumeration from the underlying platform TODO ???
     + A literal array, of the form ~Array(c1, ..., cn)~,
       where _ALL of the ~ci~'s are themselves /constant expressions/._
     + An identifier defined by a constant value definition.

** 6.25 Statements
** 6.26 Implicit Conversions
*** 6.26.1 Value Conversions
*** 6.26.2 Method Conversions
*** 6.26.3 Overloading Resolution
*** 6.26.4 Local Type Inference
*** 6.26.5 Eta Expansion
*** 6.26.6 Dynamic Member Selection

* TODO 7. Implicits
** 7.1 The Implicit Modifier
** 7.2 Implicit Parameters
** 7.3 Views
** 7.4 Context Bounds and View Bounds
** 7.5 Manifests

* TODO 8. Pattern Matching
** 8.1 Patterns
*** 8.1.1 Variable Patterns
*** 8.1.2 Typed Patterns
*** 8.1.3 Pattern Binders
*** 8.1.4 Literal Patterns
*** 8.1.5 Interpolated string patterns
*** 8.1.6 Stable Identifier Patterns
*** 8.1.7 Constructor Patterns
*** 8.1.8 Tuple Patterns
*** 8.1.9 Extractor Patterns
*** 8.1.10 Pattern Sequences
*** 8.1.11 Infix Operation Patterns
*** 8.1.12 Pattern Alternatives
*** 8.1.13 XML Patterns
*** 8.1.14 Regular Expression Patterns
*** 8.1.15 Irrefutable Patterns

** 8.2 Type Patterns
** 8.3 Type Parameter Inference in Patterns
*** 8.3.1 Type parameter inference for typed patterns
*** 8.3.2 Type parameter inference for constructor patterns

** 8.4 Pattern Matching Expressions
** 8.5 Pattern Matching Anonymous Functions

* TODO 9. Top-Level Definitions
** 9.1 Compilation Units
** 9.2 Packagings
** 9.3 Package Objects
** 9.4 Package References
** 9.5 Programs

* TODO 10. XML Expressions and Patterns
  # By Burak Emir

** 10.1 XML expressions
** 10.2 XML patterns

* TODO 11. Annotations
** 11.1 Definition
** 11.2 Predefined Annotations
*** 11.2.1 Java Platform Annotations
*** 11.2.2 Java Beans Annotations
*** 11.2.3 Deprecation Annotations
*** 11.2.4 Scala Compiler Annotations

** 11.3 User-defined Annotations
** 11.4 Host-platform Annotations

* TODO 12. The Scala Standard Library
** 12.1 Root Classes
** 12.2 Value Classes
*** 12.2.1 Numeric Value Types
*** 12.2.2 Class Boolean
*** 12.2.3 Class Unit

** 12.3 Standard Reference Classes
*** 12.3.1 Class String
*** 12.3.2 The Tuple classes
*** 12.3.3 The Function Classes
*** 12.3.4 Class Array

** 12.4 Class Node
** 12.5 The Predef Object
*** 12.5.1 Predefined Implicit Definitions

* TODO 13. Syntax Summary
** 13.1. Lexical Syntax
** 13.2. Context-free Syntax

* TODO 14. References
  - TODO (see comments in markdown source)

* TODO 15. Changelog
  Changes in Version _2.13.1_
  - *Unicode normalization*
    Unicode escapes are no longer pre-processed, but are processed as regular escapes.

** 15.1 Changes in Version 2.8.0
** 15.2 Changes in Version 2.8
** 15.3 Changes in Version 2.7.2
** 15.4 Changes in Version 2.7.1
** 15.5 Changes in Version 2.7.0
** 15.6 Changes in Version 2.6.1
** 15.7 Changes in Version 2.6
** 15.8 Changes in Version 2.5
** 15.9 Changes in Version 2.4
** 15.10 Changes in Version 2.3.2
** 15.11 Changes in Version 2.3
** 15.12 Changes in Version 2.1.8
** 15.13 Changes in Version 2.1.7
** 15.14 Changes in Version 2.1.5
** 15.15 Changes in Version 2.0
