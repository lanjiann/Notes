#+TITLE: Hands-on Scala.js
#+SUBTITLE: Writing client-side web application in Scala
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Intro to Scala.js][Intro to Scala.js]]
  - [[About JavaScript][About JavaScript]]
    - [[JavaScript-the-language][JavaScript-the-language]]
    - [[JavaScript-the-platform][JavaScript-the-platform]]
  - [[About Scala.js][About Scala.js]]
    - [[The Language][The Language]]
    - [[Sharing Code][Sharing Code]]
    - [[Client-Server Integration][Client-Server Integration]]
- [[Hands On][Hands On]]
  - [[Getting Started][Getting Started]]
    - [[Opening up the Project][Opening up the Project]]
    - [[The Application Code][The Application Code]]
    - [[The Project Code][The Project Code]]
      - [[=project/build.sbt=][=project/build.sbt=]]
      - [[=build.sbt=][=build.sbt=]]
      - [[=src/main/resources/index-dev.html=][=src/main/resources/index-dev.html=]]
    - [[Publishing][Publishing]]
      - [[Optimization][Optimization]]
      - [[Blob Size][Blob Size]]
    - [[Recap][Recap]]
  - [[Making a Canvas App][Making a Canvas App]]
    - [[Making a Sketchpad using Mouse Input][Making a Sketchpad using Mouse Input]]
    - [[Making a Clock using ~setInterval~][Making a Clock using ~setInterval~]]
    - [[Typing it together: Flappy Box][Typing it together: Flappy Box]]
      - [[Setting Up the Canvas][Setting Up the Canvas]]
      - [[Defining our State][Defining our State]]
      - [[Game Logic][Game Logic]]
      - [[A Working Product][A Working Product]]
    - [[Canvas Recap][Canvas Recap]]
      - [[Development Speed][Development Speed]]
      - [[Full Scala][Full Scala]]
      - [[Seamless Javascript Interop][Seamless Javascript Interop]]
  - [[Interactive Web Pages][Interactive Web Pages]]
    - [[Hello World: HTML][Hello World: HTML]]
    - [[Scalatags][Scalatags]]
    - [[Using Web Services][Using Web Services]]
      - [[Raw Javascript][Raw Javascript]]
      - [[dom.extensions][dom.extensions]]
      - [[Parsing the Data][Parsing the Data]]
    - [[Typing it together: Weather Search][Typing it together: Weather Search]]
    - [[Interactive Web Pages Recap][Interactive Web Pages Recap]]
  - [[The Command Line][The Command Line]]
    - [[Commands][Commands]]
      - [[The compile Command][The compile Command]]
      - [[The package Command][The package Command]]
      - [[The fastOptJS Command][The fastOptJS Command]]
      - [[The fullOptJS Command][The fullOptJS Command]]
      - [[The run Command][The run Command]]
      - [[The test Command][The test Command]]
    - [[Headless Runtimes][Headless Runtimes]]
    - [[Stages][Stages]]
  - [[Cross Publishing Libraries][Cross Publishing Libraries]]
    - [[A Simple Cross-Built Library][A Simple Cross-Built Library]]
      - [[Build Configuration][Build Configuration]]
      - [[Source Files][Source Files]]
      - [[Funning the Module][Funning the Module]]
    - [[Further Work][Further Work]]
    - [[Other Testing Libraries][Other Testing Libraries]]
  - [[Integrating Client-Sever][Integrating Client-Sever]]
    - [[A Client-Sever Setup][A Client-Sever Setup]]
    - [[Client-Server Reflections][Client-Server Reflections]]
      - [[Shared Templating][Shared Templating]]
      - [[Shared Code][Shared Code]]
      - [[Boilerplate-free Serialization][Boilerplate-free Serialization]]
    - [[What's Left?][What's Left?]]
    - [[Autowire][Autowire]]
      - [[Setting up Autowire][Setting up Autowire]]
      - [[Why Autowire?][Why Autowire?]]
- [[In Depth][In Depth]]
  - [[Advanced Techniques][Advanced Techniques]]
    - [[Functional-Reactive UIs][Functional-Reactive UIs]]
      - [[Why FRP][Why FRP]]
      - [[FRP with Scala.Rx][FRP with Scala.Rx]]
      - [[More Rx][More Rx]]
    - [[Asynchronous Workflows][Asynchronous Workflows]]
      - [[Futures & Promises][Futures & Promises]]
      - [[Scala-Async][Scala-Async]]
  - [[Deviations from Scala-JVM][Deviations from Scala-JVM]]
    - [[Language Differences][Language Differences]]
    - [[Library Differences][Library Differences]]
      - [[Standard Library][Standard Library]]
      - [[Macros v.s. Reflection][Macros v.s. Reflection]]
      - [[Pure-Scala v.s. Java Libraries][Pure-Scala v.s. Java Libraries]]
      - [[JavaScript APIs v.s. JVM APIs][JavaScript APIs v.s. JVM APIs]]
      - [[Scala/Browser tooling v.s. Java tooling][Scala/Browser tooling v.s. Java tooling]]
  - [[The Compilation Pipeline][The Compilation Pipeline]]
    - [[Whole Program Optimization][Whole Program Optimization]]
    - [[How Compilation Works][How Compilation Works]]
      - [[Compilation][Compilation]]
      - [[Fast Compilation][Fast Compilation]]
      - [[Full Compilation][Full Compilation]]
  - [[Scala.js' Design Space][Scala.js' Design Space]]
    - [[Why No Reflection?][Why No Reflection?]]
      - [[Dead Code Elimination][Dead Code Elimination]]
      - [[Whither Reflection?][Whither Reflection?]]
      - [[Macros][Macros]]
    - [[Why does error behavior differ?][Why does error behavior differ?]]
      - [[Divide-by-zero: a case study][Divide-by-zero: a case study]]
      - [[The Performance/Correctness Tradeoff][The Performance/Correctness Tradeoff]]
    - [[Small Executables][Small Executables]]
      - [[Raw Verbosity][Raw Verbosity]]
      - [[Browsers Performance][Browsers Performance]]
      - [[Deployment Size][Deployment Size]]
  - [[Java APIs][Java APIs]]
    - [[Available Java APIs][Available Java APIs]]
    - [[Porting Java APIs][Porting Java APIs]]

* Intro to Scala.js
  Scala.js COMPILES Scala code TO equivalent, executable JavaScript.

  - Example (Hello-world):
    + Scala.js
      #+BEGIN_SRC scala
        // scala.js
        object Main extends js.JSApp {
          def main(): Unit = {
            var x = 0
            while (x < 10) x += 3
            println(x)
            // 12
          }
        }
      #+END_SRC

    + JavaScript
      #+BEGIN_SRC javascript
        ScalaJS.c.LMain$.prototype.main__V = (function() {
            var x = 0;
            while ((x < 10)) {
                x = ((x + 3) | 0)
            };
            ScalaJS.m.s_Predef$()
                .println__O__V(x)
            // 12
        });
      #+END_SRC


** About JavaScript
*** JavaScript-the-language
*** JavaScript-the-platform

** About Scala.js
*** The Language
*** Sharing Code
*** Client-Server Integration

* Hands On
** Getting Started
*** Opening up the Project
*** The Application Code
*** The Project Code
**** =project/build.sbt=
**** =build.sbt=
**** =src/main/resources/index-dev.html=

*** Publishing
**** Optimization
**** Blob Size
*** Recap

** Making a Canvas App
*** Making a Sketchpad using Mouse Input
*** Making a Clock using ~setInterval~
*** Typing it together: Flappy Box
**** Setting Up the Canvas
**** Defining our State
**** Game Logic
**** A Working Product

*** Canvas Recap
**** Development Speed
**** Full Scala
**** Seamless Javascript Interop

** Interactive Web Pages
*** Hello World: HTML
*** Scalatags
*** Using Web Services
**** Raw Javascript
**** dom.extensions
**** Parsing the Data

*** Typing it together: Weather Search
*** Interactive Web Pages Recap

** The Command Line
*** Commands
**** The compile Command
**** The package Command
**** The fastOptJS Command
**** The fullOptJS Command
**** The run Command
**** The test Command

*** Headless Runtimes
*** Stages

** Cross Publishing Libraries
*** A Simple Cross-Built Library
**** Build Configuration
**** Source Files
**** Funning the Module

*** Further Work
*** Other Testing Libraries

** Integrating Client-Sever
*** A Client-Sever Setup
*** Client-Server Reflections
**** Shared Templating
**** Shared Code
**** Boilerplate-free Serialization

*** What's Left?
*** Autowire
**** Setting up Autowire
**** Why Autowire?

* In Depth
** Advanced Techniques
*** Functional-Reactive UIs
**** Why FRP
**** FRP with Scala.Rx
**** More Rx

*** Asynchronous Workflows
**** Futures & Promises
**** Scala-Async
***** Traditional Asynchrony
***** Using Scala-Async

** Deviations from Scala-JVM
*** Language Differences
*** Library Differences
**** Standard Library
**** Macros v.s. Reflection
**** Pure-Scala v.s. Java Libraries
**** JavaScript APIs v.s. JVM APIs
**** Scala/Browser tooling v.s. Java tooling

** The Compilation Pipeline
*** Whole Program Optimization
*** How Compilation Works
**** Compilation
**** Fast Compilation
**** Full Compilation

** Scala.js' Design Space
*** Why No Reflection?
**** Dead Code Elimination
**** Whither Reflection?
**** Macros

*** Why does error behavior differ?
**** Divide-by-zero: a case study
**** The Performance/Correctness Tradeoff

*** Small Executables
**** Raw Verbosity
**** Browsers Performance
**** Deployment Size

** Java APIs
*** Available Java APIs
*** Porting Java APIs
