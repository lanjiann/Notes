#+TITLE: Reflection
#+VERSION: 2.13.1
#+STARTUP: entitiespretty

* TODO Overview
** Runtime Reflection
*** Examples
**** Inspecting a Runtime Type (Including Generic Types at Runtime)
**** Instantiating a Type at Runtime
**** Accessing and Invoking Members of Runtime Types

*** Runtime Classes in Java vs. Runtime Types in Scala

** Compile-time Reflection
** Environment
*** ~Universe~'s
*** ~Mirror~'s

* TODO Environment, Universes, and Mirrors
** Environment
** Universes
** Mirrors
*** Runtime Mirrors
*** Types of Mirrors, Their Use Cases & Examples
*** Compile-Time Mirrors

* TODO Symbols, Trees, and Types
** Symbols
*** The ~Symbol~ Owner Hierarchy
*** ~TypeSymbol~'s
*** ~TermSymbol~'s
*** ~Symbol~ Conversions
*** Free symbols

** Types
*** Instantiating Types
**** Instantiating Types With ~typeOf~
**** Standard Types

*** Common Operations on Types
**** Subtyping Relationships
**** Type Equality
**** Querying Types for Members and Declarations

** Trees
*** Kinds of ~Tree~'s
*** Inspecting Trees
*** Traversing Trees
**** Traversal via Pattern Matching
**** Traversal via ~Traverser~

*** Creating Trees
**** Tree Creation via ~reify~
***** Splicing Trees

**** Tree Creation via ~parse~ on ~ToolBox~'es
***** Typechecking with ~ToolBox~'es

**** Tree Creation via Manual Construction

* TODO Annotations, Names, Scopes, and More
** Annotations
** Names
*** Standard Names

** Scopes
** Exprs
** Flags and flag sets
** Constants
** Printers
*** Printing Trees
*** Printing Types

** Positions

* TODO ~TypeTag~'s and ~Manifest~'s
** Obtaining a ~TypeTag~
*** via the Methods ~typeTag~, ~classTag~, or ~weakTypeTag~
*** Using an Implicit Parameter of Type ~TypeTag[T]~, ~ClassTag[T]~, or ~WeakTypeTag[T]~
*** Using a Context bound of a Type Parameter

** ~WeakTypeTag~'s
** ~TypeTag~'s and ~Manifest~'s

* TODO Thread Safety
* TODO Changes in Scala 2.11
