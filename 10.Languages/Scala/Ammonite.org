#+TITLE: Ammonite
#+VERSION: 3rd, 2018
#+INFO: Covers Java SE 9
#+AUTHOR: 
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Ammonite-REPL][Ammonite-REPL]]
  - [[Features][Features]]
    - [[Pretty-printed output][Pretty-printed output]]
      - [[Configurable Truncation][Configurable Truncation]]
    - [[Editing][Editing]]
      - [[Syntax Highlighting][Syntax Highlighting]]
      - [[Multi-line editing][Multi-line editing]]
      - [[Desktop key-bindings][Desktop key-bindings]]
      - [[Console key-bindings][Console key-bindings]]
      - [[History Search][History Search]]
      - [[Block Input][Block Input]]
      - [[Undo & Redo][Undo & Redo]]
    - [[Magic Imports][Magic Imports]]
      - [[import ~$file~][import ~$file~]]
      - [[import ~$exec~][import ~$exec~]]
      - [[import ~$ivy~][import ~$ivy~]]
    - [[Builtins][Builtins]]
      - [[Repl API][Repl API]]
      - [[Utilities][Utilities]]
    - [[Save/Load Session][Save/Load Session]]
    - [[Superior Autocomplete][Superior Autocomplete]]
    - [[Interrupting run-away execution with Ctrl-C][Interrupting run-away execution with Ctrl-C]]
    - [[Compiler-crash Robustness][Compiler-crash Robustness]]
    - [[Other Fixes][Other Fixes]]
  - [[Configuration][Configuration]]
    - [[Refs][Refs]]
    - [[Compiler Flags][Compiler Flags]]
    - [[JVM Flags][JVM Flags]]
  - [[Embedding][Embedding]]
    - [[Instantiating Ammonite][Instantiating Ammonite]]
    - [[Debugging][Debugging]]
    - [[Remote REPL][Remote REPL]]
- [[Scala Scripts][Scala Scripts]]
  - [[Script Files][Script Files]]
    - [[Script Imports][Script Imports]]
      - [[Other Scripts][Other Scripts]]
      - [[Ivy Dependencies][Ivy Dependencies]]
    - [[Multi-stage Scripts][Multi-stage Scripts]]
    - [[Script Arguments][Script Arguments]]
    - [[Ammonite Arguments in Scripts][Ammonite Arguments in Scripts]]
    - [[Multiple Main Methods][Multiple Main Methods]]
    - [[Script Usage Docs][Script Usage Docs]]
    - [[Bundled Libraries][Bundled Libraries]]
    - [[Script Builtins][Script Builtins]]
    - [[Script Predef][Script Predef]]
  - [[Running Scripts][Running Scripts]]
    - [[From Bash][From Bash]]
    - [[Watch and Reload][Watch and Reload]]
    - [[Script Debug REPL][Script Debug REPL]]
    - [[From the REPL][From the REPL]]
    - [[Execution Model][Execution Model]]
    - [[SBT Integration][SBT Integration]]
- [[Ammonite-Ops][Ammonite-Ops]]
  - [[Paths][Paths]]
    - [[RelPaths][RelPaths]]
    - [[Path Operations][Path Operations]]
    - [[Constructing Paths][Constructing Paths]]
  - [[Operations][Operations]]
    - [[Operator Reference][Operator Reference]]
    - [[Extensions][Extensions]]
      - [[Traversable][Traversable]]
      - [[Pipeable][Pipeable]]
      - [[Callable][Callable]]
    - [[Chaining][Chaining]]
    - [[Reading Resources][Reading Resources]]
    - [[Spawning Subprocesses][Spawning Subprocesses]]
      - [[Environment Variables][Environment Variables]]
      - [[Invoking Files][Invoking Files]]
      - [[Current Working Directory][Current Working Directory]]
- [[Ammonite-Shell][Ammonite-Shell]]
  - [[Shell Basics][Shell Basics]]
    - [[Working Directory][Working Directory]]
    - [[Listing Files][Listing Files]]
    - [[Filesystem Operations][Filesystem Operations]]
    - [[Piping][Piping]]
    - [[Subprocesses][Subprocesses]]
  - [[Scripting][Scripting]]
    - [[Scala Scripting][Scala Scripting]]
    - [[Typed Values][Typed Values]]
    - [[Scala/Java APIs][Scala/Java APIs]]
    - [[Writing/Loading Scripts][Writing/Loading Scripts]]
  - [[Design Decisions & Tradeoffs][Design Decisions & Tradeoffs]]
    - [[Scala as the Language][Scala as the Language]]
    - [[Running on the JVM][Running on the JVM]]
    - [[Goals of Ammonite-Shell][Goals of Ammonite-Shell]]
- [[Ammonite Cookbook][Ammonite Cookbook]]
  - [[HTTP Requests][HTTP Requests]]
  - [[Scraping HTML][Scraping HTML]]
  - [[GUI Applications][GUI Applications]]
  - [[Office Automation][Office Automation]]
  - [[Image Processing][Image Processing]]
  - [[Machine Learning][Machine Learning]]
  - [[Play Framework Server][Play Framework Server]]
  - [[SQL Database][SQL Database]]
- [[Reference][Reference]]
  - [[Community][Community]]
  - [[Older Scala Versions][Older Scala Versions]]
  - [[Talks][Talks]]
  - [[In the Wild][In the Wild]]
  - [[Scaladoc][Scaladoc]]
  - [[Changelog][Changelog]]
    - [[1.1.2][1.1.2]]
    - [[1.1.1][1.1.1]]
    - [[1.1.0][1.1.0]]
    - [[1.0.5][1.0.5]]
    - [[1.0.3][1.0.3]]
    - [[1.0.2][1.0.2]]
    - [[1.0.1][1.0.1]]
    - [[1.0.0][1.0.0]]
    - [[0.9.9][0.9.9]]
    - [[0.9.8][0.9.8]]
    - [[0.9.7][0.9.7]]
    - [[0.9.6][0.9.6]]
    - [[0.9.5][0.9.5]]
    - [[0.9.4][0.9.4]]
    - [[0.9.3][0.9.3]]
    - [[0.9.2][0.9.2]]
    - [[0.9.1][0.9.1]]
    - [[0.9.0][0.9.0]]
    - [[0.8.x][0.8.x]]
      - [[0.8.5][0.8.5]]
      - [[0.8.4][0.8.4]]
      - [[0.8.3][0.8.3]]
      - [[0.8.2][0.8.2]]
      - [[0.8.1][0.8.1]]
      - [[0.8.0][0.8.0]]
    - [[0.7.x][0.7.x]]
      - [[0.7.9][0.7.9]]
      - [[0.7.8][0.7.8]]
      - [[0.7.7][0.7.7]]
      - [[0.7.6][0.7.6]]
      - [[0.7.5][0.7.5]]
      - [[0.7.4][0.7.4]]
      - [[0.7.3][0.7.3]]
      - [[0.7.2][0.7.2]]
      - [[0.7.0][0.7.0]]
    - [[0.6.x][0.6.x]]
      - [[0.6.2][0.6.2]]
      - [[0.6.1][0.6.1]]
      - [[0.6.0][0.6.0]]
    - [[0.5.x][0.5.x]]
      - [[0.5.9][0.5.9]]
      - [[0.5.8][0.5.8]]
      - [[0.5.7][0.5.7]]
      - [[0.5.6][0.5.6]]
      - [[0.5.5][0.5.5]]
      - [[0.5.4][0.5.4]]
      - [[0.5.3][0.5.3]]
      - [[0.5.2][0.5.2]]
      - [[0.5.1][0.5.1]]
      - [[0.5.0][0.5.0]]
    - [[0.4.x][0.4.x]]
      - [[0.4.9][0.4.9]]
      - [[0.4.8][0.4.8]]
      - [[0.4.7][0.4.7]]
      - [[0.4.6][0.4.6]]
      - [[0.4.5][0.4.5]]
      - [[0.4.4][0.4.4]]
      - [[0.4.3][0.4.3]]
      - [[0.4.2][0.4.2]]
      - [[0.4.1][0.4.1]]
      - [[0.4.0][0.4.0]]
    - [[0.3.x][0.3.x]]
      - [[0.3.2][0.3.2]]
      - [[0.3.1][0.3.1]]
      - [[0.3.0][0.3.0]]
    - [[0.2.x][0.2.x]]
      - [[0.2.9][0.2.9]]
      - [[0.2.8][0.2.8]]
  - [[Unstable Versions][Unstable Versions]]
    - [[Unstable Changelog][Unstable Changelog]]

* Ammonite-REPL
  - The Ammonite-REPL is an improved Scala REPL, re-implemented from first
    principles. It is much more featureful.

  - It can be combined with /Ammonite-Ops/ to replace Bash as your systems shell.

  - If you want some initialization code available to the REPL, you can add it to
    your =~/.ammonite/predef.sc=.

  - You can also try out _Ammonite 1.1.2_ in an EXISTING _SBT project_.
    To do so, add the following to your =build.sbt=
    #+BEGIN_SRC scala
      libraryDependencies += {
        val version = scalaBinaryVersion.value match {
          case "2.10" => "1.0.3"
          case _ â‡’ "1.1.2"
        }
        "com.lihaoyi" % "ammonite" % version % "test" cross CrossVersion.full
      }

      sourceGenerators in Test += Def.task {
        val file = (sourceManaged in Test).value / "amm.scala"
        IO.write(file, """object amm extends App { ammonite.Main.main(args) }""")
        Seq(file)
      }.taskValue

      // Optional, required for the `source` command to work
      (fullClasspath in Test) ++= {
        (updateClassifiers in Test).value
          .configurations
          .find(_.configuration == Test.name)
          .get
          .modules
          .flatMap(_.artifacts)
          .collect{case (a, f) if a.classifier == Some("sources") => f}
      }
    #+END_SRC
    + After that, simply hit
      ~sbt projectName/test:run~
      or if there are other ~main~ methods in the ~Test~ scope
      ~sbt projectName/test:run-main amm~
      To activate the Ammonite REPL.

  - You can also configure Ammonite in the global configuration file of SBT:
    =~/.sbt/0.13/global.sbt=

  -  *Note*:
    /Ammonite-REPL/ does _NOT_ support Windows,
    even though /Ammonite-Ops/ does.

    See #119 if you are interested in details or want to try your hand at making
    it work.

** Features
   Ammonite-REPL supports many more features than the default REPL, including: 

*** Pretty-printed output
    Ammonite-REPL uses ~PPrint~ to display its output by default.

**** Configurable Truncation
     - Show the ~...~ with, for example, ~show(Seq.fill(20)(100))~

     - Change height:
       ~repl.pprinter() = repl.pprinter().copy(defaultHeight = 5)~

     - Ammonite-REPL intelligently truncates your output when it's beyond a certain
       size.

       + You can request for the full output to be printed on-demand, print a certain
         number of lines, or even change the implicit ~pprintConfig~ so subsequent
         lines all use your new configuration.

*** Editing
**** Syntax Highlighting
**** Multi-line editing
**** Desktop key-bindings
**** Console key-bindings
**** History Search
**** Block Input
     - The ~{ ... }~ will be unwrapped!

     - The ~{{ ... }}~ will *NOT* be unwrapped, and it can be used as a block as
       in normal Scala source code.

**** Undo & Redo

*** TODO Magic Imports
     Ammonite provides a set of _magic imports_ that let you load additional code
     into a REPL session:
       these are imports which start with a ~$~, and are *top-level* inside the
     REPL command or your /Scala Scripts/.

**** DONE import ~$file~
     CLOSED: [2018-08-01 Wed 17:46]
     Write a Scala Script =MyScript.sc=.
     #+BEGIN_SRC scala
       // MyScript.sc
       val elite = 31337
     #+END_SRC

     - Import the =MyScript.sc=:
       ~@ import $file.MyScript~

       + Use it: ~MyScript.elite~

       =From Jian=
       Here =@= is the prompt of Ammonite

     - If the Scala Script is in a folder =myfolder=, you can
       ~@ import $file.myfolder.MyScript~

     - If the script is in an _OUTER folder_,
       ~@ import $file.^.MyScript~

     - If we want to import the contents of the script in one go: 
       ~import $file.MyScript, MyScript._~

       + Use it: ~elite~

     - *Note*
       you can also perform /file imports/ from your /predef file/, which are
       resolved relative to that file's path =???=.
         This is useful if your predef is large and you want to break it up into
       multiple files.

***** DONE Imported Scripts are Re-used - *Re-Read*
      CLOSED: [2018-08-01 Wed 17:36]
      - No matter how many times you load a script file, it will only be compiled
        once, and its top-level definitions or statements will only be evaluated
        once.

        If you want to run parts of it multiple times, define a function in it,
        rather than load the file multiple times.

      - If you want to reload the script file, you need to use *Ammonite's Save/Load
        Session* functionality to
        + ~sess.save()~ the session BEFORE importing the script
          AND
        + ~sess.load()~ to reset the script BEFORE re-importing the script you need.

***** DONE Cannot directly import from inside a Script
      CLOSED: [2018-08-01 Wed 17:39]
      - ~@ import $file.MyScript._~ is *ILLEGAL*!!!
        You must do ~@ import $file.MyScript, MyScript._~

***** DONE Renamed-scripts and multiple-scripts
      CLOSED: [2018-08-01 Wed 17:45]
      - As in normal Scala Source code, use the pattern of
        ~@ import $file.{MyScript, MyOtherScript}~

      - *ALWAYS ILLEGAL* ~@ import $file._~

**** TODO import ~$exec~

**** TODO import ~$ivy~

*** TODO Builtins
**** TODO Repl API
**** TODO Utilities
***** source
***** time
***** grep
***** browse
***** desugar

*** Save/Load Session
*** Superior Autocomplete
*** Interrupting run-away execution with Ctrl-C
*** Compiler-crash Robustness
*** Other Fixes

** Configuration
*** Refs
*** Compiler Flags
*** JVM Flags

** Embedding
*** Instantiating Ammonite
*** Debugging
*** Remote REPL

* Scala Scripts
** Script Files
*** Script Imports
**** Other Scripts
**** Ivy Dependencies

*** Multi-stage Scripts
*** Script Arguments
*** Ammonite Arguments in Scripts
*** Multiple Main Methods
*** Script Usage Docs
*** Bundled Libraries
*** Script Builtins
*** Script Predef

** Running Scripts
*** From Bash
*** Watch and Reload
*** Script Debug REPL
*** From the REPL
*** Execution Model
*** SBT Integration

* Ammonite-Ops
** Paths
*** RelPaths
*** Path Operations
*** Constructing Paths

** Operations
*** Operator Reference
*** Extensions
**** Traversable
**** Pipeable
**** Callable

*** Chaining
*** Reading Resources
*** Spawning Subprocesses
**** Environment Variables
**** Invoking Files
**** Current Working Directory

* Ammonite-Shell
** Shell Basics
*** Working Directory
*** Listing Files
*** Filesystem Operations
*** Piping
*** Subprocesses

** Scripting
*** Scala Scripting
*** Typed Values
*** Scala/Java APIs
*** Writing/Loading Scripts

** Design Decisions & Tradeoffs
*** Scala as the Language
*** Running on the JVM
*** Goals of Ammonite-Shell

* Ammonite Cookbook
** HTTP Requests
** Scraping HTML
** GUI Applications
** Office Automation
** Image Processing
** Machine Learning
** Play Framework Server
** SQL Database

* Reference
** Community
** Older Scala Versions
** Talks
** In the Wild
** Scaladoc
** Changelog
*** 1.1.2
*** 1.1.1
*** 1.1.0
*** 1.0.5
*** 1.0.3
*** 1.0.2
*** 1.0.1
*** 1.0.0
*** 0.9.9
*** 0.9.8
*** 0.9.7
*** 0.9.6
*** 0.9.5
*** 0.9.4
*** 0.9.3
*** 0.9.2
*** 0.9.1
*** 0.9.0
*** 0.8.x
**** 0.8.5
**** 0.8.4
**** 0.8.3
**** 0.8.2
**** 0.8.1
**** 0.8.0

*** 0.7.x
**** 0.7.9
**** 0.7.8
**** 0.7.7
**** 0.7.6
**** 0.7.5
**** 0.7.4
**** 0.7.3
**** 0.7.2
**** 0.7.0

*** 0.6.x
**** 0.6.2
**** 0.6.1
**** 0.6.0

*** 0.5.x
**** 0.5.9
**** 0.5.8
**** 0.5.7
**** 0.5.6
**** 0.5.5
**** 0.5.4
**** 0.5.3
**** 0.5.2
**** 0.5.1
**** 0.5.0

*** 0.4.x
**** 0.4.9
**** 0.4.8
**** 0.4.7
**** 0.4.6
**** 0.4.5
**** 0.4.4
**** 0.4.3
**** 0.4.2
**** 0.4.1
**** 0.4.0

*** 0.3.x
**** 0.3.2
**** 0.3.1
**** 0.3.0

*** 0.2.x
**** 0.2.9
**** 0.2.8

** Unstable Versions
*** Unstable Changelog

