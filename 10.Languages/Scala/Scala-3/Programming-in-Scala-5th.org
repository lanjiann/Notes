#+TITLE: Programming in Scala
#+SUBTITLE: A comprehensive step-by-step guide - Updated for Scala 3.0
#+VERSION: 5th - PrePrint
#+AUTHOR: Martin Odersky, Lex Spoon, Bill Venners, Frank Sommers
#+STARTUP: overview
#+STARTUP: entitiespretty

* Contents - xii
* List of Figures - xx
* List of Tables - xxi
* List of Listings - xxii
* Foreword - xxviii
* Acknowledgments - xxx
* Introduction - xxxiii
* 1 A Scalable Language - 40
** 1.1 A language that grows on you - 41
** 1.2 What makes Scala scalable? - 46
** 1.3 Why Scala? - 49
** 1.4 Scala’s roots - 56
** 1.5 Conclusion - 58
   
* 2 First Steps in Scala - 59
** Step 1. Learn to use the Scala REPL - 59
** Step 2. Define some variables - 61
** Step 3. Define some functions - 63
** Step 4. Write some Scala scripts - 65
** Step 5. Loop with while; decide with if - 66
** Step 6. Iterate with foreach and for-do - 68
** Conclusion - 71
   
* 3 Next Steps in Scala - 72
** Step 7. Parameterize arrays with types - 72
** Step 8. Use lists - 76
** Step 9. Use tuples - 81
** Step 10. Use sets and maps - 82
** Step 11. Learn to recognize the functional style - 86
** Step 12. Transform with map and for-yield - 89
** Conclusion - 92
   
* 4 Classes and Objects - 93
** 4.1 Classes, fields, and methods - 93
** 4.2 Semicolon inference - 97
** 4.3 Singleton objects - 98
** 4.4 Case classes - 101
** 4.5 A Scala application - 103
** 4.6 Conclusion - 105
   
* 5 Basic Types and Operations - 106
** 5.1 Some basic types - 106
** 5.2 Literals - 107
** 5.3 String interpolation - 112
** 5.4 Operators are methods - 114
** 5.5 Arithmetic operations - 117
** 5.6 Relational and logical operations - 118
** 5.7 Bitwise operations - 119
** 5.8 Object equality - 120
** 5.9 Operator precedence and associativity - 122
** 5.10 Rich operations - 125
** 5.11 Conclusion - 125
   
* 6 Functional Objects - 127
** 6.1 A specification for class Rational - 127
** 6.2 Constructing a Rational - 128
** 6.3 Reimplementing the toString method - 130
** 6.4 Checking preconditions - 131
** 6.5 Adding fields - 132
** 6.6 Self references - 134
** 6.7 Auxiliary constructors - 134
** 6.8 Private fields and methods - 136
** 6.9 Defining operators - 137
** 6.10 Identifiers in Scala - 139
** 6.11 Method overloading - 142
** 6.12 Extension methods - 144
** 6.13 A word of caution - 145
** 6.14 Conclusion - 145
   
* 7 Built-in Control Structures - 147
** 7.1 If expressions - 148
** 7.2 While loops - 149
** 7.3 For expressions - 152
** 7.4 Exception handling with try expressions - 157
** 7.5 Match expressions - 161
** 7.6 Living without break and continue - 162
** 7.7 Variable scope - 164
** 7.8 Refactoring imperative-style code - 167
** 7.9 Conclusion - 169
   
* 8 Functions and Closures - 170
** 8.1 Methods - 170
** 8.2 Local functions - 171
** 8.3 First-class functions - 173
** 8.4 Short forms of function literals - 174
** 8.5 Placeholder syntax - 175
** 8.6 Partially applied functions - 176
** 8.7 Closures - 179
** 8.8 Special function call forms - 181
** 8.9 Tail recursion - 184
** 8.10 Conclusion - 188
   
* 9 Control Abstraction - 189
** 9.1 Reducing code duplication - 189
** 9.2 Simplifying client code - 193
** 9.3 Currying - 195
** 9.4 Writing new control structures - 196
** 9.5 By-name parameters - 199
** 9.6 Conclusion - 201
   
* 10 Composition and Inheritance - 203
** 10.1 A two-dimensional layout library - 203
** 10.2 Abstract classes - 204
** 10.3 Defining parameterless methods - 205
** 10.4 Extending classes - 208
** 10.5 Overriding methods and fields - 210
** 10.6 Defining parametric fields - 211
** 10.7 Invoking superclass constructors - 213
** 10.8 Using override modifiers - 214
** 10.9 Polymorphism and dynamic binding - 216
** 10.10 Declaring final members - 218
** 10.11 Using composition and inheritance - 219
** 10.12 Implementing above, beside, and toString - 221
** 10.13 Defining a factory object - 223
** 10.14 Heighten and widen - 225
** 10.15 Putting it all together - 226
** 10.16 Conclusion - 230
   
* 11 Traits - 231
** 11.1 How traits work - 231
** 11.2 Thin versus rich interfaces - 234
** 11.3 Traits as stackable modifications - 236
** 11.4 Why not multiple inheritance? - 240
** 11.5 Trait parameters - 245
** 11.6 Conclusion - 247
   
* 12 Packages and Imports - 248
** 12.1 Putting code in packages - 248
** 12.2 Concise access to related code - 249
** 12.3 Imports - 253
** 12.4 Implicit imports - 256
** 12.5 Access modifiers - 257
** 12.6 Top-level definitions - 262
** 12.7 Conclusion - 263
   
* 13 Pattern Matching - 264
** 13.1 A simple example - 264
** 13.2 Kinds of patterns - 268
** 13.3 Pattern guards - 277
** 13.4 Pattern overlaps - 279
** 13.5 Sealed classes - 280
** 13.6 Pattern matching Options - 282
** 13.7 Patterns everywhere - 284
** 13.8 A larger example - 288
** 13.9 Conclusion - 296
    
* 14 Enums - 297
** 14.1 Enumerated data types - 297
** 14.2 Algebraic data types - 301
** 14.3 Generalized ADTs - 303
** 14.4 What makes ADTs algebraic - 304
** 14.5 Conclusion - 308
   
* 15 Working with Lists - 309
** 15.1 List literals - 309
** 15.2 The List type - 310
** 15.3 Constructing lists - 310
** 15.4 Basic operations on lists - 311
** 15.5 List patterns - 312
** 15.6 First-order methods on class List - 314
** 15.7 Higher-order methods on class List - 325
** 15.8 Methods of the List object - 332
** 15.9 Processing multiple lists together - 334
** 15.10 Understanding Scala’s type inference algorithm - 335
** 15.11 Conclusion - 339
   
* 16 Working with Other Collections - 340
** 16.1 Sequences - 340
** 16.2 Sets and maps - 344
** 16.3 Selecting mutable versus immutable collections - 351
** 16.4 Initializing collections - 353
** 16.5 Tuples - 356
** 16.6 Conclusion - 358
   
* 17 Mutable Objects - 360
** 17.1 What makes an object mutable? - 360
** 17.2 Reassignable variables and properties - 362
** 17.3 Case study: Discrete event simulation - 366
** 17.4 A language for digital circuits - 366
** 17.5 The Simulation API - 369
** 17.6 Circuit Simulation - 374
** 17.7 Conclusion - 381
   
* 18 Scala’s Hierarchy - 382
** 18.1 Scala’s class hierarchy - 382
** 18.2 How primitives are implemented - 386
** 18.3 Bottom types - 388
** 18.4 Defining your own value classes - 389
** 18.5 Intersection types - 392
** 18.6 Union types - 393
** 18.7 Conclusion - 396
   
* 19 Type Parameterization - 397
** 19.1 Functional queues - 397
** 19.2 Information hiding - 400
** 19.3 Variance annotations - 403
** 19.4 Checking variance annotations - 408
** 19.5 Lower bounds - 411
** 19.6 Contravariance - 412
** 19.7 Upper bounds - 416
** 19.8 Conclusion - 418
   
* 20 Abstract Members - 420
** 20.1 A quick tour of abstract members - 420
** 20.2 Type members - 421
** 20.3 Abstract vals - 422
** 20.4 Abstract vars - 422
** 20.5 Initializing abstract vals - 424
** 20.6 Abstract types - 431
** 20.7 Path-dependent types - 433
** 20.8 Refinement types - 436
** 20.9 Case study: Currencies - 437
** 20.10 Conclusion - 445
   
* 21 Givens - 448
** 21.1 How it works - 448
** 21.2 Parameterized given types - 452
** 21.3 Anonymous givens - 457
** 21.4 Parameterized givens as typeclasses - 458
** 21.5 Given imports - 461
** 21.6 Rules for context parameters - 462
** 21.7 When multiple givens apply - 465
** 21.8 Debugging givens - 467
** 21.9 Conclusion - 469
   
* 22 Extension Methods - 470
** 22.1 The basics - 470
** 22.2 Generic extensions - 473
** 22.3 Collective extensions - 474
** 22.4 Using a typeclass - 477
** 22.5 Extension methods for givens - 479
** 22.6 Where Scala looks for extension methods - 483
** 22.7 Conclusion - 484
   
* 23 Typeclasses - 485
* 24 Assertions and Tests - 486
** 24.1 Assertions - 486
** 24.2 Testing in Scala - 488
** 24.3 Informative failure reports - 489
** 24.4 Tests as specifications - 491
** 24.5 Property-based testing - 494
** 24.6 Organizing and running tests - 496
** 24.7 Conclusion - 497
   
* A Migrating from Scala 2 to Scala 3 - 498
* Glossary - 499
* Bibliography - 515
* About the Authors - 518
