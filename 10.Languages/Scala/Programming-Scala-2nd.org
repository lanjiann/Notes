#+TITLE: Programming Scala
#+SUBTITLE: Scalability = Functional Programming + Objects
#+VERSION: 2nd, 2014 -> 3rd, 2021
#+AUTHOR: Dean Wampler
#+STARTUP: overview
#+STARTUP: entitiespretty

* TODO Foreword - xv
* TODO Preface - xvii
** Welcome to Programming Scala, Third Edition
** Welcome to Programming Scala, Second Edition
** Welcome to Programming Scala, First Edition
** Conventions Used in This Book
** Using Code Examples
** Getting the Code Examples
** O’Reilly Safari
** How to Contact Us
** Acknowledgments for the Third Edition
** Acknowledgments for the Second Edition
** Acknowledgments for the First Edition  

* TODO 1. Zero to Sixty: Introducing Scala - 1
** Why Scala? - 1
*** The Seductions of Scala - 2
    
** Why Scala 3? - ???
*** Migrating to Scala 3 - ???

** Installing Scala - 3
*** Coursier - ???
*** Java JDK - ???
*** Using SBT - ???
*** Scala - ???

** Building the Code Examples - ???
** More Tips - ???
*** Using SBT - ???
*** Running the Scala Command-Line Tools - ???
   
** A Taste of Scala - ???
** A Sample Application - ???
** A Taste of Concurrency - 19
** Recap and What's Next - 30

* TODO 2. Type Less, Do More - 31
** New Scala 3 Syntax - ???
** Semicolons - 31
** Variable Declarations - 32
** Ranges - 34
** Partial Functions - 35
** Infix Operator Notation - ???
** Method Declarations - 36
*** Method Default and Named Parameters - 36
*** Methods with Multiple Parameter Lists - 37
*** Nesting Method Definitions and Recursion - ???

** Inferring Type Information - 44
** Variadic Argument Lists - ???
** Reserved Words - 49
** Literal Values - 51
*** Numeric Literals - ???
*** Boolean Literals - ???
*** Character Literals - 54
*** String Literals - 54
*** Symbol Literals - 56
*** Function Literals - 56
*** Tuple Literals - 57

** ~Option~, ~Some~, and ~None~: Avoiding ~null~'s - 58
*** When You Can't Avoid ~null~'s
    
** Sealed Class Hierarchies and Enumerations - ???
** Organizing Code in Files and Namespaces - 61
** Importing Types and Their Members - 63
*** Package Imports and Package Objects - ???

** Abstract Types Versus Parameterized Types - 65
** Recap and What's Next - 68

* TODO 3. Rounding Out the Basics - 69
** Operator Overloading? - 69
** Allowed Characters in Identifiers - ???
*** Syntactic Sugar - ???

** Methods with Empty Parameter Lists - 72
** Precedence Rules - 73
*** Left vs. Right Associative Methods - ???
    
** Enumerations and Algebraic Data Types - ???
** Interpolated Strings
** Scala Conditional Expressions
** Conditional Operators
** Scala ~for~ Comprehensions - 76
*** for Loops - 76
*** Generator Expressions - 77
*** Guards: Filtering Values - 77
*** Yielding New Values - 78
*** Expanded Scope and Value Definitions - 79

** Scala ~while~ Loops - 76
*** Scala ~do~ - ~while~ Loops - =NOT AVAILABLE in Scala3=
    
** Using try, catch, and finally Clauses - 82
** Call by Name, Call by Value - 85
** lazy val - 89
** Traits: Interfaces and “Mixins” in Scala - 94
** Recap and What's Next - 97
    
* TODO 4. Pattern Matching - 99
** Values, Variables, and Types in Matches - 100
** Matching on Sequences - 104
** Matching on Tuples - 108
*** Parameter Untupling - 108
    
** Guards in case Clauses - 108
** Matching on case Classes and Enums - 109
*** unapply Method - 110
*** unapplySeq Method - 114

** Matching on Regular Expressions - 117
** More on Type Matching - ???
** Sealed Hierarchies and Exhaustive Matches - ???
** Chaining Match Expressions - ???
** Pattern Matching in Other Contexts
*** Problems in Pattern Bindings
    
** Extractors
*** ~unapply~ Method
*** Alternatives to Option Return Values
*** ~unapplySeq~ Method
*** Implementing ~unapplySeq~
    
** Concluding Remarks on Pattern Matching
** Recap and What's Next

* TODO 5. Abstracting over Context: Type Classes and Extension Methods
** Four Changes
** Extension Methods
** Type Classes
*** Scala 3 Type Classes
*** Scala 2 Type Classes
    
** Implicit Conversions
*** Rules for Implicit Conversion Resolution
    
** Type Class Derivation
*** Givens and Imports
    
** Resolution Rules for Givens and Extension Methods
*** Build Your Own String Interpolator
*** The Expression Problem
    
** Wise Use of Type Extensions
** Recap and What's Next

* TODO 6. Abstracting over Context: Using Clauses
** Using Clauses
** Context Bounds
*** By-Name Context Parameters
    
** Other Context Parameters
** Passing Context Functions
** Constraining Allowed Instances
** Implicit Evidence
** Working Around Type Erasure with Context Bounds
** Rules for Using Clauses
** Improving Error Messages
** Recap and What's Next
   
* TODO 7. Functional Programming in Scala - 167
** What Is Functional Programming? - 168
*** Functions in Mathematics - 168
*** Variables That Aren't - 169

** Functional Programming in Scala - 172
*** Anonymous Functions, Lambdas, and Closures - 173
*** Purity Inside Versus Outside - 176

** Recursion - 176
** TODO Tail Calls and Tail-Call Optimization - 177
   - =TODO=
   - =TODO=
   - =TODO=

*** DONE Trampoline for Tail Calls - 178
    CLOSED: [2020-06-29 Mon 04:02]
    - Trampoline :: a loop that works through a list of functions, calling each one in turn.
      + It's obvious that this name is a metaphor.

    - Examples:
      + Given in the book and the ScalaDoc of ~scala.util.control.TailCalls~
        #+begin_src scala
          import scala.util.control.TailCalls._

          def isEven(xs: List[Int]): TailRec[Boolean] =
            if (xs.isEmpty) done(true) else tailcall(isOdd(xs.tail))

          def isOdd(xs: List[Int]): TailRec[Boolean] =
            if (xs.isEmpty) done(false) else tailcall(isEven(xs.tail))

          isEven((1 to 100000).toList).result
        #+end_src

      + =from Jian= Given in the Scaladoc of ~scala.util.control.TailCalls~
        =from Jian= The above example is easy to understand, but _why this can
                    use /trampoline/???_
        #+begin_src scala
          def fib(n: Int): TailRec[Int] =
            if (n < 2)
              done(n)
            else for {
              x <- tailcall(fib(n - 1))
              y <- tailcall(fib(n - 2))
            } yield x + y

          fib(40).result
        #+end_src

** Partially Applied Functions Versus Partial Functions - 179
** Currying and Uncurrying Functions - 181
** Functional Data Structures - 185
*** Sequences - 185
*** Maps - 190
*** Sets - 192

** Traversing, Mapping, Filtering, Folding, and Reducing - 192
*** Traversal - 192
*** Mapping - 194
*** Flat Mapping - 196
*** Filtering - 197
*** Folding and Reducing - 199
*** Left Versus Right Folding - ???

** Combinators: Software's Best Component Abstractions - 210
** What About Making Copies? - 213
** Recap and What's Next - 216

* TODO 8. ~for~ Comprehensions in Depth - 217
** Recap: The Elements of ~for~ Comprehensions - 217
** ~for~ Comprehensions: Under the Hood - 220
** Translation Rules of ~for~ Comprehensions - 222
** ~Option~'s and Other Container Types - 226
*** ~Option~ as a Container - 226
*** ~Either~: A Logical Extension to Option - 230
*** ~Try~: When There Is No Do - 234
*** Cats Validator - 236

** Recap and What's Next - 239

* =============================================
* Still 2nd
* 8. Object-Oriented Programming in Scala - 241
** Class and Object Basics - 242
** Reference Versus Value Types - 244
** Value Classes - 246
** Parent Types - 249
** Constructors in Scala - 250
** Fields in Classes - 254
*** The Uniform Access Principle - 256
*** Unary Methods - 257

** Validating Input - 257
** Calling Parent Class Constructors (and Good Object-Oriented Design) - 259
*** Good Object-Oriented Design: A Digression - 260

** Nested Types - 265
** Recap and What’s Next - 266
   
* 9. Traits - 267
** Interfaces in Java 8 - 267
** Traits as Mixins - 268
** Stackable Traits - 273
** Constructing Traits - 278
** Class or Trait? - 279
** Recap and What’s Next - 280

* 10. The Scala Object System, Part I - 281
** Parameterized Types: Variance Under Inheritance - 281
*** Functions Under the Hood - 282
*** Variance of Mutable Types - 286
*** Variance in Scala Versus Java - 288

** The Scala Type Hierarchy - 289
** Much Ado About Nothing (and Null) - 291
** Products, Case Classes, and Tuples - 295
** The Predef Object - 297
*** Implicit Conversions - 297
*** Type Definitions - 299
*** Condition Checking Methods - 300
*** Input and Output Methods - 301
*** Miscellaneous Methods - 303

** Equality of Objects - 303
*** The equals Method - 304
*** The \equal\equal{} and !\equal{} Methods - 304
*** The eq and ne Methods - 305
*** Array Equality and the sameElements Method - 305

** Recap and What's Next - 306

* 11. The Scala Object System, Part II - 307
** Overriding Members of Classes and Traits - 307
*** Avoid Overriding Concrete Members - 308
*** Attempting to Override final Declarations - 310
*** Overriding Abstract and Concrete Methods - 311
*** Overriding Abstract and Concrete Fields - 313
*** Overriding Abstract Types - 319
*** When Accessor Methods and Fields Are Indistinguishable: The Uniform Access Principle - 320

** Linearization of an Object’s Hierarchy - 322
** Recap and What’s Next - 327

* 12. The Scala Collections Library - 329
** Generic, Mutable, Immutable, Concurrent, and Parallel Collections, Oh My! - 329
*** The scala.collection Package - 330
*** The collection.concurrent Package - 331
*** The collection.convert Package - 332
*** The collection.generic Package - 332
*** The collection.immutable Package - 332
*** The scala.collection.mutable Package - 333
*** The scala.collection.parallel Package - 335

** Choosing a Collection - 336
** Design Idioms in the Collections Library - 337
*** Builder - 337
*** CanBuildFrom - 338
*** Like Traits - 339

** Specialization for Value Types - 340
*** Miniboxing - 341

** Recap and What's Next - 342

* 13. Visibility Rules - 343
** Public Visibility: The Default - 343
** Visibility Keywords - 344
** Public Visibility - 345
** Protected Visibility - 346
** Private Visibility - 347
** Scoped Private and Protected Visibility - 349
** Final Thoughts on Visibility - 355
** Recap and What's Next - 356

* 14. Scala's Type System, Part I - 357
** Parameterized Types - 358
*** Variance Annotations - 358
*** Type Constructors - 358
*** Type Parameter Names - 358

** Type Bounds - 359
*** Upper Type Bounds - 359
*** Lower Type Bounds - 360

** Context Bounds - 364
** View Bounds - 365
** Understanding Abstract Types - 367
*** Comparing Abstract Types and Parameterized Types - 368

** Self-Type Annotations - 370
** Structural Types - 375
** Compound Types - 379
*** Type Refinements - 379

** Existential Types - 380
** Recap and What's Next - 382

* 15. Scala's Type System, Part II - 383
** Path-Dependent Types - 383
*** C.this - 384
*** C.super - 384
*** path.x - 385

** Dependent Method Types - 386
** Type Projections - 387
*** Singleton Types - 389

** Types for Values - 390
*** Tuple Types - 390
*** Function Types - 390
*** Infix Types - 391

** Higher-Kinded Types - 392
** Type Lambdas - 396
** Self-Recursive Types: F-Bounded Polymorphism - 398
** Recap and What’s Next - 399

* 16. Advanced Functional Programming - 401
** Algebraic Data Types - 401
*** Sum Types Versus Product Types - 401
*** Properties of Algebraic Data Types - 403
*** Final Thought on Algebraic Data Types - 404

** Category Theory - 404
*** About Categories - 405
*** The Functor Category - 406
*** The Monad Category - 410
*** The Importance of Monad - 412

** Recap and What’s Next - 414

* 17. Tools for Concurrency - 417
** The scala.sys.process Package - 417
** Futures - 419
*** Async - 422

** Robust, Scalable Concurrency with Actors - 423
** Akka: Actors for Scala - 424
*** Actors: Final Thoughts - 435

** Pickling and Spores - 436
** Reactive Programming - 436
** Recap and What's Next - 438

* 18. Scala for Big Data - 439
** Big Data: A Brief History - 439
** Improving MapReduce with Scala - 441
** Moving Beyond MapReduce - 446
** Categories for Mathematics - 447
** A List of Scala-Based Data Tools - 448
** Recap and What's Next - 449

* 19. Dynamic Invocation in Scala - 451
** A Motivating Example: ActiveRecord in Ruby on Rails - 451
** Dynamic Invocation in Scala with the Dynamic Trait - 452
** DSL Considerations - 457
** Recap and What's Next - 457

* 20. Domain-Specific Languages in Scala - 459
** Examples: XML and JSON DSLs for Scala - 460
** Internal DSLs - 462
** External DSLs with Parser Combinators - 467
*** About Parser Combinators - 467
*** A Payroll External DSL - 467

** Internal Versus External DSLs: Final Thoughts - 470
** Recap and What’s Next - 470

* 21. Scala Tools and Libraries - 473
** Command-Line Tools - 473
*** scalac Command-Line Tool - 473
*** The scala Command-Line Tool - 477
*** The scalap and javap Command-Line Tools - 481
*** The scaladoc Command-Line Tool - 482
*** The fsc Command-Line Tool - 482

** Build Tools - 482
*** SBT, the Standard Build Tool for Scala - 482
*** Other Build Tools - 484

** Integration with IDEs and Text Editors - 485
*** Text Editors - 486

** Test-Driven Development in Scala - 486
** Third-Party Libraries - 487
** Recap and What’s Next - 489

* 22. Java Interoperability - 491
** Using Java Names in Scala Code - 491
** Java and Scala Generics - 491
** JavaBean Properties - 493
** AnyVal Types and Java Primitives - 495
** Scala Names in Java Code - 495
** Recap and What's Next - 495

* 23. Application Design - 497
** Recap of What We Already Know - 497
** Annotations - 498
** Traits as Modules - 502
** Design Patterns - 503
*** Creational Patterns - 504
*** Structural Patterns - 505
*** Behavioral Patterns - 506

** Better Design with Design by Contract - 508
** The Parthenon Architecture - 510
** Recap and What's Next - 515

* TODO 24. Metaprogramming: Macros and Reflection - 517
  - Metaprogramming is programming that manipulates programs, rather than data.
    + =from Jian=
       Usually convert programs to data, manipulates it, and then convert it back
       to data.

  - The word /reflection/ is also sometimes used to mean _metaprogramming IN
    GENERAL._ That is the sense of the term for the Scala reflection library
    (=from Jian= /runtime reflection/ and /macros/).
    + However, sometimes the term has the narrower meaning of *runtime "introspection"*
      of code with *LIMITED or NO modifications*.

  - In languages like Scala where code is compiled and then run, versus being
    interpreted "on the fly" like many dynamically typed languages, there is a
    distinction between compile-time and runtime metaprogramming.
    In compile-time metaprogramming, any invocations occur just before or during
    compilation. The classic C-language preprocessor is an example of processing
    that transforms the source code before it's compiled.

  - Scala's metaprogramming support happens at compile time using a macro facility.
    Macros work more like constrained compiler plug-ins, because they manipulate
    the abstract syntax tree (AST) produced from the parsed source code.
    + /Macros/ are invoked to manipulate the AST before the final compilation phases
      leading to byte-code generation.

  - The _Java reflection library_ and
    Scala's expanded library offer /runtime reflection/.

  - Scala's reflection API, _which includes the /macro/ support_, is the most
    rapidly evolving part of Scala (=from Jian= Deprecated in Scala 3). Because
    it's a fast-moving target, we'll focus on the *most STABLE parts*:
    + /runtime reflection/
    + a /macro tool/ called /quasiquotes/.
    + However, we'll end with a full macro example using the current macro API.

  - A next-generation macro facility is being developed.
    The project is called *Scala Meta*. At the time of this writing, a preview
    release is forthcoming. You should look there for the latest information
    about macros as they will appear in a subsequent release of Scala. For the
    current macro implementation for Scala 2.10 and 2.11, see http://scalamacros.org
    and Macro Paradise, the incubator project for the current macro system.

  - We'll begin with some useful REPL tools for understanding the types of
    expressions, then explore /runtime reflection/, followed by /quasiquotes/
    with a final macro example.

** DONE Tools for Understanding Types - 518
   CLOSED: [2020-06-26 Fri 01:14]
   #+begin_src scala
     // REPL

     // scala> if (true) false else 11.1
     // res0: AnyVal = false

     // scala> :type if (true) false else 11.1
     // AnyVal

     // scala> :type -v if (true) false else 11.1
     //// Type signature
     // AnyVal
     //
     //// Internal Type structure
     // TypeRef(TypeSymbol(abstract class AnyVal extends Any))
   #+end_src
   - The ~scala.reflect.api.Types.TypeRef~ and ~scala.reflect.api.Symbols.TypeSymbol~
     types are defined in the _reflection API_, which is _NOW a separate library
     from the core standard library_.

** DONE Runtime Reflection - 518
   CLOSED: [2019-05-24 Fri 14:33]
   - /Compile-time reflection/ is used for _manipulating code_.

   - /Runtime reflection/ is often called /extreme late binding/.
     It is used primarily to
     + *"tweak"* language /semantics/ (within limits)
     + *load code* that is NOT KNOWN at /compile time/,

   - Examples: =TODO= _More Details_
     + Which instance to use for a particular feature might be specified dynamically
       through properties or command-line arguments.

     + The reflection API is used to locate the corresponding types in the available
       byte code found on the ~CLASSPATH~, and if found, construct instances.

     + Tools like IDEs can use /reflection/ _to *discover* and *load* plug-ins._

     + IDEs often use /reflection/ to learn about code in projects and libraries,
       to support
       * code completion
       * type checking
       * etc.

     + Byte-code tools might use reflection to look for security vulnerabilities
       and other problems.

*** DONE Reflecting on Types - 519
    CLOSED: [2020-06-26 Fri 02:09]
    - Use Java's reflection API, such as methods in ~java.lang.Class~:
      #+begin_src scala
        import scala.language.existentials

        trait T[A] {
          val vT: A
          def mT = vT
        }

        class C(foo: Int) extends T[String] {
          val vT = "T"
          val vC = "C"
          def mC = vC

          class C2
        }

        object Main extends App {
          val c = new C(3)
          // c: C = $anon$1@5a58e6a4

          val clazz = classOf[C]  // Scala method: classOf[C]
          // clazz: Class[C] = class C

          val clazz2 = c.getClass  // Method from java.langObject
          // clazz2: Class[_ <: C] = class $anon$1

          val name = clazz.getName
          // name: String = C

          val methods = clazz.getMethods
          // methods: Array[java.lang.reflect.Method] =
          //   Array(pubic java.lang.String C.mC(), public java.lang.Object C.vT(), ...)

          val ctors = clazz.getConstructors
          // ctors: Array[java.lang.reflect.Constructor[_]] = Array(public C(int))

          val fields = clazz.getFields
          // fields: Array[java.lang.reflect.Field] = Array()

          val parentInterfaces = clazz.getInterfaces
          // parentInterfaces: Array[Class[_]] = Array(interface T)

          val superClass = clazz.getSuperclass
          // superClass: Class[_ >: C] = class.java.lang.Object

          val typeParams = clazz.getTypeParameters
          // typeParams: Array[java.lang.reflect.TypeVariable[Class[C]]] = Array()
        }
      #+end_src
      + These /methods/ are *ONLY available* on /subtypes/ of ~AnyRef~.

      + Note that ~getFields~ does *NOT* appear to recognize the fields in ~C~ for
        Scala types! -- =from Jian= Conclusion: don't use ~getFields~ in Scala.

    - _Check type_ and /cast/:
      + Examples:
        + Check type: ~c.isInstanceOf[String]~
        + /Cast/: ~c.asInstanceOf[T[String]]~

      + Java uses /operators/ that are /language keywords/ for these tasks.

      + The Scala /method/ names are DELIBERATELY verbose to *discourage* their use!
        Other language features, especially pattern matching, are better
        alternatives.

*** DONE Class Tags, Type Tags, and Manifests - 520
    CLOSED: [2020-06-29 Mon 01:41]
    - The core Scala 2.11 library has a *small* reflection API, while the more
      advanced reflection features are in the separate library.

    - Let's investigate ~ClassTag~ _in the core library_, which is _a tool for
      retaining some information that is otherwise lost to type /erasure/,_ the
      "feature" of the JVM where it doesn't retain the values used for /type
      parameters/ when instantiating /parameterized types/.

    - We saw in "More on Type Matching" on page 119 that /erasure/ prevents us from
      /pattern matching/ on the types used as /type parameters/ in /parameterized
      types/.
      + We used an _ugly workaround_ then, where we
        1. matched on the /collection/
        2. then matched on the /types/ _within it_.

      + We also *CAN'T* /overload/ /methods/ where the only difference between them
        is the /type parameter/ for a /parameterized type/ used in the /signatures/.

    - ~ClassTag~ provides a BETTER (=from Jian= but still) _workaround_ that we'll
      now examine:
      #+begin_src scala
        // src/main/scala/progscala2/metaprogramming/match-types.sc
        import scala.reflect.ClassTag

        object A {
          def useClassTag[T : ClassTag](seq: Seq[T]): String = seq match {  // 1
            case Nil       => "Nothing"
            case head +: _ => implicitly(head).getClass.toString  // 2
          }

          def check(seq: Seq[_]): String =  // 3
            s"Seq: ${useClassTag(seq)}"

          Seq(Seq(5.5,5.6,5.7),
              Seq("a", "b"),
              Seq(1, "two", 3.14),
              Nil) foreach {  // 4
            case seq: Seq[_] => println("%20s: %s".format(seq, check(seq)))
            case x           => println("%20s: %s".format(x, "unknown!"))
          }
        }
      #+end_src
      + The second ~case~ of ~useClassTag~ check the first element of an non-empty
        ~seq~. It has a bug that it use the first element type to represent the
        type of all elements in this ~seq~ -- it should be /least upper bound/!
        =TODO= We'll fix this bug shortly.

    - ~ClassTag~ is a weaker version of ~scala.reflect.api.TypeTags#TypeTag~,
      _found in the separate API_.
      + ~TypeTag~ retains the FULL /compile-time/ info (=TODO= we'll use it shortly)

      + ~ClassTag~ only retains the /runtime/ info.

      + Finally, there is a ~scala.reflect.api.TypeTags#WeakTypeTag~ for /abstract
        types/. =TODO= See the detailed description in the Scala docs. =TODO=

    - *CAUTION*
      There are *DEPRECATED* /types/ (=from Jian= itself is not marked as
      ~@deprecated(...)~, but its superclass ~ClassManifest~ is *DEPRECATED*) in
      the ~reflect~ /package/ called ~Manifest~ that were used for the same
      purpose *before Scala 2.10 introduced ~TypeTag~, ~ClassTag~, etc.*

    - Another important usage for ~ClassTag~ is to _construct Java Arrays of the
      correct ~AnyRef~ /subtype/._
      Here is an example adapted from the Scaladoc page for ~ClassTag~:
      #+begin_src scala
        // src/main/scala/progscala2/metaprogramming/mkArray.sc
        import scala.reflect.ClassTag

        def mkArray[T : ClassTag](elems: T*) =
          Array[T](elems: _*)
        // mkArray: [T](elems: T*)(implicit evidence$1: scala.reflect.ClassTag[T])Array[T]

        mkArray(1, 2, 3)
        // res0: Array[Int] = Array(1, 2, 3)

        mkArray("one", "two", "three")
        // res1: Array[String] = Array(one, two, three)

        mkArray(1, "two", 3.14)
        // <console>:10: warning: a type was inferred to be `Any`;
        //   this may indicate a programming error.
        //               mkArray(1, "two", 3.14)
        //                       ^
        // res2: Array[Any] = Array(1, two, 3.14)
      #+end_src
      It uses the ~Array.apply~ method for ~AnyRef~'s, which has a second argument
      list with a single _implicit_ ~ClassTag~ argument.

** DONE Scala's Advanced Runtime Reflection API - 522
   CLOSED: [2020-06-29 Mon 03:41]
   *All the code blow require ~import scala.reflect.runtime.universe._~.*

   - Get ~Type~:
     #+begin_src scala
       def toType[T : TypeTag](t: T): Type = typeOf[T]
     #+end_src
     + the ~universe~ is of type ~scala.reflect.api.JavaUniverse~

     + ~typeOf[T]~ is a shortcut for ~implicitly[TypeTag[T]].tpe~

   - Use cases:
     #+begin_src scala
       toType(1)
       // res1: reflect.runtime.universe.Type = Int

       toType(true)
       // res2: reflect.runtime.universe.Type = Boolean

       toType(Seq(1, true, 3.14))
       // <console>:12: warning: a type was inferred to be `AnyVal`;
       //   this may indicate a programming error.
       //               toType(Seq(1, true, 3.14))
       //                         ^
       // res3: reflect.runtime.universe.Type = Seq[AnyVal]

       toType((i: Int) => i.toString)
       // res4: reflect.runtime.universe.Type = Int => java.lang.String
     #+end_src
     + In this way, the types for the /parameterized type parameters/ are correctly
       determined -- fixing the bug we had in ~useClassTag~.
       _We'll omit the ~AnyVal~ warnings from now on._

   - Compare types for equality or parent-child relationships:
     #+begin_src scala
       toType(1) =:= typeOf[AnyVal]  // false
       toType(1) =:= toType(1)       // true
       toType(1) =:= toType(true)    // false

       toType(1) <:< typeOf[AnyVal]  // true
       toType(1) <:< toType(1)       // true
       toType(1) <:< toType(true)    // false

       typeOf[Seq[Int]] =:= typeOf[Seq[Any]] // false
       typeOf[Seq[Int]] <:< typeOf[Seq[Any]] // true
     #+end_src

   - Covariance and contravariance of functions:
     #+begin_src scala
       // src/main/scala/progscala2/metaprogramming/func.sc

       sealed class CSuper              { def msuper() = println("CSuper") }
       sealed class C    extends CSuper { def m() = println("C") }
       final  class CSub extends C      { def msub() = println("CSub") }

       typeOf[C      => C     ] =:= typeOf[C => C]  // true
       typeOf[CSuper => CSub  ] =:= typeOf[C => C]  // false
       typeOf[CSub   => CSuper] =:= typeOf[C => C]  // false

       typeOf[C      => C     ] <:< typeOf[C => C]  // true
       typeOf[CSuper => CSub  ] <:< typeOf[C => C]  // true
       typeOf[CSub   => CSuper] <:< typeOf[C => C]  // false
     #+end_src
     + When you can't remember the /variance/ relationships between /function
       types/, try to use this way to figure it out.

   - ~toType~ function return values of type ~TypeRef~, and we use pattern matching
     to extract its info (~TypeRef~ is NOT a case class! It just has an /extractor/).
     #+begin_src scala
       def toTypeRefInfo[T : TypeTag](x: T): (Type, Symbol, Seq[Type]) = {
         val TypeRef(pre, typName, parems) = toType(x)
         (pre, typName, parems)
       }
     #+end_src
     + Both the ~Type~ and ~Symbol~ here defined in ~reflect.runtime.universe~,
       *NOT to be confused with ~scala.Symbol~.* =IMPORTANT= =!!!=
       =from Jian= How they can pick a different name for one of them.

     + Example:
       #+begin_src scala
         toTypeRefInfo(1)                       // (scala.type, class Int, List())
         toTypeRefInfo(true)                    // (scala.type, class Boolean, List())
         toTypeRefInfo(Seq(1, true, 3.14))      // (scala.collection.type, trait Seq, List(AnyVal))
         toTypeRefInfo((i: Int) => i.toString)  // (scala.type, trait Function1, List(Int, java.lang.String))
       #+end_src

   - We get even more information with TypeApi.
     Let's try it with Seq in the REPL, to see the types returned. We’ll elide long output:
     #+begin_src scala
       val ts = toType(Seq(1, true, 3.14))
       // ts: reflect.runtime.universe.Type = Seq[AnyVal]

       ts.typeSymbol
       // res0: reflect.runtime.universe.Symbol = trait Seq

       ts.erasure
       // res1: reflect.runtime.universe.Type = Seq[Any]

       ts.typeArgs
       // res2: List[reflect.runtime.universe.Type] = List(AnyVal)

       ts.baseClasses
       // res4: List[reflect.runtime.universe.Symbol] =
       //   List(trait Seq, trait SeqLike, trait GenSeq, trait GenSeqLike, ...)

       ts.companion
       // res5: reflect.runtime.universe.Type = scala.collection.Seq.type

       ts.decls
       // res6: reflect.runtime.universe.MemberScope = SynchronizedOps(
       //   method $init$, method companion, method seq)

       ts.members
       // res7: reflect.runtime.universe.MemberScope = Scopes(
       //   method seq, method companion, method $init$, method toString, ...)
     #+end_src
     + ~members~ returns ALL /declarations/ that are /inherited/, too.
     + Method ~declarations~ exists, but it is *DEPRECATED* and use the ~decls~!

   - =TODO= =TODO= =TODO=
     You'll find more examples in the _overview_ and the reflection _Scaladocs_.

** TODO Macros - 525
*** A Macro Example: Enforcing Invariants - 528
*** Final Thoughts on Macros - 531

** TODO Wrapping Up and Looking Ahead - 531

* A. References - 533
* Index - 539
