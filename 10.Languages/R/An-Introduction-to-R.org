#+TITLE: An Introduction to R
#+SUBTITLE: Notes on R: A Programming Environment for Data Analysis and Graphics
#+VERSION: 3.6.2 (2019-12-12)
#+AUTHOR: W. N. Venables, D. M. Smith, and the R Core Team
#+STARTUP: entitiespretty

* Preface - 1
* 1 Introduction and preliminaries - 2
** 1.1  The R environment - 2
** 1.2  Related software and documentation - 2
** 1.3  R and statistics - 2
** 1.4  R and the window system - 3
** 1.5  Using R interactively - 3
** 1.6  An introductory session - 4
** 1.7  Getting help with functions and features - 4
** 1.8  R commands, case sensitivity, etc - 4
** 1.9  Recall and correction of previous commands - 5
** 1.10 Executing commands from or diverting output to a file - 5
** 1.11 Data permanency and removing objects - 5

* 2 Simple manipulations; numbers and vectors - 7
** DONE 2.1 Vectors and assignment - 7
   CLOSED: [2020-02-23 Sun 14:45]
   - Create a vector with the ~c(elements...)~ function.
     ~c~ will flatten the arguments passed in if needed.

   - In most contexts the ~=~ operator can be used as an alternative.
     =from Jian=
     *But DO NOT do this!!!*
     I still don't know the reason.

   - The ~<-~ can be considered as a syntactic sugar of 
     ~assign("x", a_value)~

   - Both ~<-~ and ~->~ mean /assignment/.
     #+begin_src r
       c(10.4, 5.6, 3.1) -> x
     #+end_src

** DONE 2.2 Vector arithmetic - 7
   CLOSED: [2020-02-23 Sun 14:58]
   - Write vector arithmetic as writing number arithmetic.

   - R will fill in values when the vectors in vector arithmetic does NOT match
     the required.
     =from Jian=
     Book describes rules, but I don't want to learn.
       Avoid this behavior!!! Good news is when this happen, a WARNING message
     will be printed.

   - Operators ~+~, ~-~, ~*~, ~/~, and ~^~

   - Functions ~log~, ~exp~, ~sin~, ~cos~, ~tan~, ~sqrt~, and so on.

   - ~mean()~ TODO

   - ~var()~ TODO

   - ~sort()~ TODO

   - ~min~ and ~max~ will flat their parameters if needed before comparing.

   - ~pmin~ and ~pmax~ won't flat their parameters, and it will return a vector
     with min of max of corresponding position values.
     =from Jian= The returned value is of the longest vector length

   - Complex numbers are supported, but must be explicitly point out!!!
     + ~sqrt(-17)~ will return ~NaN~.
     + ~sqrt(-17+0i)~ will return the expected complex value.
   
** DONE 2.3 Generating regular sequences - 8
   CLOSED: [2020-02-23 Sun 15:07]
   - Use the ~:~ operator to generate a sequence of numbers.
     + ~:~ has a high precedence. Evaludate ~2 * 1:3~, and get ~c(2, 4, 6)~.
     + ~:~ can be used to generate a sequence backwards.

   - A more general function ~seq()~:
     It has five arguments:
     + ~from~
     + ~to~
     + ~by~, by default ~1~
     + ~length~
     + ~along~ TODO ???

   - ~rep()~
     Example:
     #+begin_src r
       # Put 5 `x` end-to-end
       s5 <- rep(x, times = 5)
       # Caution: x will be flatten if needed.

       # Repeat each element in `x` 5 times
       s6 <- rep(x, each = 5)
     #+end_src

** DONE 2.4 Logical vectors - 9
   CLOSED: [2020-02-23 Sun 15:13]
   Logical quantities: ~TRUE~, ~FALSE~, and ~NA~.

   - ~T~ and ~F~ are built-in values pointed to ~TRUE~ and ~FALSE~, respectively.
     However, they are not reserved, and can be overwritten by a user.
     *You _should never ever_ use ~T~ and ~F~!!!*

   - ~<~, ~<=~, ~>~, ~>=~, ~==~, and ~!=~.

   - ~!~, ~&~, and ~|~

   - There are situations where logical vectors and their coerced numeric counterparts
     are not equivalent, for example see the next subsection
     TODO TODO TODO.

** DONE 2.5 Missing values - 9
   CLOSED: [2020-02-23 Sun 15:17]
   - ~is.na()~ function.

   - ~is.na(x)~ is ~TRUE~ when ~x~ is ~NA~ or ~NaN~.

   - ~is.nan(x)~ is ~TRUE~ ONLY when ~x~ is ~NaN~.

   - TODO NOTE

** TODO 2.6 Character vectors - 10
** TODO 2.7 Index vectors; selecting and modifying subsets of a data set - 10
** TODO 2.8 Other types of objects - 11

* 3 Objects, their modes and attributes - 13
** 3.1 Intrinsic attributes: mode and length - 13
** 3.2 Changing the length of an object - 14
** 3.3 Getting and setting attributes - 14
** 3.4 The class of an object - 14

* 4 Ordered and unordered factors - 16
** 4.1 A specific example - 16
** 4.2 The function ~tapply()~ and ragged arrays - 16
** 4.3 Ordered factors - 17

* 5 Arrays and matrices - 18
** 5.1 Arrays - 18
** 5.2 Array indexing. Subsections of an array - 18
** 5.3 Index matrices - 19
** 5.4 The ~array()~ function- 20
*** 5.4.1 Mixed vector and array arithmetic. The recycling rule - 20

** 5.5 The outer product of two arrays - 21
** 5.6 Generalized transpose of an array - 21
** 5.7 Matrix facilities - 22
*** 5.7.1 Matrix multiplication - 22
*** 5.7.2 Linear equations and inversion - 22
*** 5.7.3 Eigenvalues and eigenvectors - 23
*** 5.7.4 Singular value decomposition and determinants - 23
*** 5.7.5 Least squares fitting and the QR decomposition - 23

** 5.8 Forming partitioned matrices, ~cbind()~ and ~rbind()~ - 24
** 5.9 The concatenation function, ~c()~, with arrays - 24
** 5.10 Frequency tables from factors - 25

* 6 Lists and data frames - 26
** 6.1 Lists- 26
** 6.2 Constructing and modifying lists - 27
*** 6.2.1 Concatenating lists- 27

** 6.3 Data frames - 27
*** 6.3.1 Making data frames - 27
*** 6.3.2 ~attach()~ and ~detach()~ - 28
*** 6.3.3 Working with data frames - 28
*** 6.3.4 Attaching arbitrary lists - 28
*** 6.3.5 Managing the search path - 29

* 7 Reading data from files - 30
** 7.1 The ~read.table()~ function - 30
** 7.2 The ~scan()~ function - 31
** 7.3 Accessing builtin datasets - 31
*** 7.3.1 Loading data from other R packages- 31

** 7.4 Editing data - 32

* 8 Probability distributions - 33
*** 8.1 R as a set of statistical tables - 33
*** 8.2 Examining the distribution of a set of data - 34
*** 8.3 One- and two-sample tests - 36

* 9 Grouping, loops and conditional execution - 40
** 9.1 Grouped expressions - 40
** 9.2 Control statements - 40
*** 9.2.1 Conditional execution: if statements - 40
*** 9.2.2 Repetitive execution: for loops, repeat and while - 40

* 10 Writing your own functions - 42
** 10.1 Simple examples - 42
** 10.2 Defining new binary operators - 43
** 10.3 Named arguments and defaults - 43
** 10.4 The '...' argument - 44
** 10.5 Assignments within functions - 44
** 10.6 More advanced examples- 44
*** 10.6.1 Efficiency factors in block designs - 44
*** 10.6.2 Dropping all names in a printed array - 45
*** 10.6.3 Recursive numerical integration - 45

** 10.7 Scope - 46
** 10.8 Customizing the environment - 48
** 10.9 Classes, generic functions and object orientation - 48

* 11 Statistical models in R - 51
** 11.1 Defining statistical models; formulae - 51
*** 11.1.1 Contrasts - 53

** 11.2 Linear models - 54
** 11.3 Generic functions for extracting model information - 54
** 11.4 Analysis of variance and model comparison- 55
*** 11.4.1 ANOVA tables - 55

** 11.5 Updating fitted models - 55
** 11.6 Generalized linear models - 56
*** 11.6.1 Families - 57
*** 11.6.2 The ~glm()~ function - 57

** 11.7 Nonlinear least squares and maximum likelihood models - 59
*** 11.7.1 Least squares - 59
*** 11.7.2 Maximum likelihood - 61

** 11.8 Some non-standard models- 61

* 12 Graphical procedures - 63
** 12.1 High-level plotting commands - 63
*** 12.1.1 The ~plot()~ function - 63
*** 12.1.2 Displaying multivariate data - 64
*** 12.1.3 Display graphics - 64
*** 12.1.4 Arguments to high-level plotting functions - 65

** 12.2 Low-level plotting commands - 66
*** 12.2.1 Mathematical annotation - 67
*** 12.2.2 Hershey vector fonts - 67

** 12.3 Interacting with graphics - 67
** 12.4 Using graphics parameters - 68
*** 12.4.1 Permanent changes: The ~par()~ function - 68
*** 12.4.2 Temporary changes: Arguments to graphics functions - 69

** 12.5 Graphics parameters list - 69
*** 12.5.1 Graphical elements - 70
*** 12.5.2 Axes and tick marks - 71
*** 12.5.3 Figure margins - 71
*** 12.5.4 Multiple figure environment - 73

** 12.6 Device drivers - 74
*** 12.6.1 PostScript diagrams for typeset documents - 74
*** 12.6.2 Multiple graphics devices - 75

** 12.7 Dynamic graphics - 76

* 13 Packages - 77
** 13.1 Standard packages - 77
** 13.2 Contributed packages and CRAN - 77
** 13.3 Namespaces - 78

* 14 OS facilities - 79
** 14.1 Files and directories - 79
** 14.2 Filepaths - 79
** 14.3 System commands - 80
** 14.4 Compression and Archives - 80

* Appendix A. A sample session - 82
* Appendix B. Invoking R - 85
*** B.1 Invoking R from the command line - 85
*** B.2 Invoking R under Windows - 89
*** B.3 Invoking R under macOS - 90
*** B.4 Scripting with R - 90

* Appendix C. The command-line editor - 92
*** C.1 Preliminaries - 92
*** C.2 Editing actions - 92
*** C.3 Command-line editor summary - 92

* Appendix D. Function and variable index - 94
* Appendix E. Concept index - 97
* Appendix F. References - 99
