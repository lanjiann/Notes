#+TITLE: An Introduction to Programming in Emacs Lisp
#+VERSION: 26.1
#+Copyright: 1990-1995, 1997, 2001-2018 Free Software Foundation, Inc.
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Preface: What to look for.][Preface: What to look for.]]
  - [[Why: Why learn Emacs Lisp?][Why: Why learn Emacs Lisp?]]
  - [[On Reading this Text: Read, gain familiarity, pick up habits....][On Reading this Text: Read, gain familiarity, pick up habits....]]
  - [[Who You Are: For whom this is written.][Who You Are: For whom this is written.]]
  - [[Lisp History][Lisp History]]
  - [[Note for Novices: You can read this as a novice.][Note for Novices: You can read this as a novice.]]
  - [[Thank You][Thank You]]
- [[List Processing: What is Lisp?][List Processing: What is Lisp?]]
  - [[Lisp Lists: What are lists?][Lisp Lists: What are lists?]]
    - [[Numbers Lists: List have numbers, other lists, in them.][Numbers Lists: List have numbers, other lists, in them.]]
    - [[Lisp Atoms: Elemental entities.][Lisp Atoms: Elemental entities.]]
    - [[Whitespace in Lists: Formatting lists to be readable.][Whitespace in Lists: Formatting lists to be readable.]]
    - [[Typing Lists: How GNU Emacs helps you type lists.][Typing Lists: How GNU Emacs helps you type lists.]]
  - [[Run a Program: Any list in Lisp is a program ready to run.][Run a Program: Any list in Lisp is a program ready to run.]]
  - [[Making Errors: Generating an error message.][Making Errors: Generating an error message.]]
  - [[Names & Definitions: Names of symbols and function definitions.][Names & Definitions: Names of symbols and function definitions.]]
  - [[Lisp Interpreter: What the Lisp interpreter does.][Lisp Interpreter: What the Lisp interpreter does.]]
    - [[Complications: Variables, Special forms, Lists within.][Complications: Variables, Special forms, Lists within.]]
    - [[Byte Compiling: Specially processing code for speed.][Byte Compiling: Specially processing code for speed.]]
  - [[Evaluation: Running a program.][Evaluation: Running a program.]]
    - [[How the Interpreter Acts: Returns and Side Effects...][How the Interpreter Acts: Returns and Side Effects...]]
    - [[Evaluating Inner Lists: Lists within lists...][Evaluating Inner Lists: Lists within lists...]]
  - [[Variables: Returning a value from a variable.][Variables: Returning a value from a variable.]]
    - [[fill-column Example][fill-column Example]]
    - [[Void Function: The error message for a symbol without a function.][Void Function: The error message for a symbol without a function.]]
    - [[Void Variable: The error message for a symbol without a value.][Void Variable: The error message for a symbol without a value.]]
  - [[Arguments: Passing information to a function.][Arguments: Passing information to a function.]]
    - [[Data types: Types of data passed to a function.][Data types: Types of data passed to a function.]]
    - [[Args as Variable or List: An argument can be the value of a variable or list.][Args as Variable or List: An argument can be the value of a variable or list.]]
    - [[Variable Number of Arguments: Some functions may take a variable number of arguments.][Variable Number of Arguments: Some functions may take a variable number of arguments.]]
    - [[Wrong Type of Argument: Passing an argument of the wrong type to a function.][Wrong Type of Argument: Passing an argument of the wrong type to a function.]]
    - [[message: A useful function for sending messages.][message: A useful function for sending messages.]]
  - [[_set_ & _setq_: Setting the value of a variable.][_set_ & _setq_: Setting the value of a variable.]]
    - [[Using _set_: Setting values.][Using _set_: Setting values.]]
    - [[Using _setq_: Setting a quoted value.][Using _setq_: Setting a quoted value.]]
    - [[Counting: Using setq to count.][Counting: Using setq to count.]]
  - [[Summary: The major points.][Summary: The major points.]]
  - [[Error Message Exercises][Error Message Exercises]]
- [[Practicing Evaluation: Running several programs.][Practicing Evaluation: Running several programs.]]
- [[Writing Defuns: How to write function definitions.][Writing Defuns: How to write function definitions.]]
- [[Buffer Walk Through: Exploring a few buffer-related functions.][Buffer Walk Through: Exploring a few buffer-related functions.]]
- [[More Complex: A few, even more complex functions.][More Complex: A few, even more complex functions.]]
- [[Narrowing & Widening: Restricting your and Emacs attention to a region.][Narrowing & Widening: Restricting your and Emacs attention to a region.]]
- [[_car_ _cdr_ & _cons_: Fundamental functions in Lisp.][_car_ _cdr_ & _cons_: Fundamental functions in Lisp.]]
- [[Cutting & Storing Text: Removing text and saving it.][Cutting & Storing Text: Removing text and saving it.]]
- [[List Implementation: How lists are implemented in the computer.][List Implementation: How lists are implemented in the computer.]]
- [[Yanking: Pasting stored text.][Yanking: Pasting stored text.]]
- [[Loops & Recursion: How to repeat a process.][Loops & Recursion: How to repeat a process.]]
- [[Regexp Search: Regular expression searches.][Regexp Search: Regular expression searches.]]
- [[Counting Words: A review of repetition and regexps.][Counting Words: A review of repetition and regexps.]]
- [[Words in a defun: Counting words in a defun.][Words in a defun: Counting words in a defun.]]
- [[Readying a Graph: A prototype graph printing function.][Readying a Graph: A prototype graph printing function.]]
- [[Emacs Initialization: How to write a .emacs file.][Emacs Initialization: How to write a .emacs file.]]
- [[Debugging: How to run the Emacs Lisp debuggers.][Debugging: How to run the Emacs Lisp debuggers.]]
- [[Conclusion: Now you have the basics.][Conclusion: Now you have the basics.]]
- [[the-the: An appendix: how to find reduplicated words.][the-the: An appendix: how to find reduplicated words.]]
- [[Kill Ring: An appendix: how the kill ring works.][Kill Ring: An appendix: how the kill ring works.]]
- [[Full Graph: How to create a graph with labeled axes.][Full Graph: How to create a graph with labeled axes.]]
- [[Free Software and Free Manuals][Free Software and Free Manuals]]
- [[GNU Free Documentation License][GNU Free Documentation License]]
- [[Index][Index]]
- [[About the Author][About the Author]]

* Preface: What to look for.
** Why: Why learn Emacs Lisp?
** On Reading this Text: Read, gain familiarity, pick up habits....
** Who You Are: For whom this is written.
** Lisp History	
** Note for Novices: You can read this as a novice.
** Thank You

* List Processing: What is Lisp?
** Lisp Lists: What are lists?
*** Numbers Lists: List have numbers, other lists, in them.
*** Lisp Atoms: Elemental entities.
*** Whitespace in Lists: Formatting lists to be readable.
*** Typing Lists: How GNU Emacs helps you type lists.

** Run a Program: Any list in Lisp is a program ready to run.
** Making Errors: Generating an error message.
** Names & Definitions: Names of symbols and function definitions.
** Lisp Interpreter: What the Lisp interpreter does.
*** Complications: Variables, Special forms, Lists within.
*** Byte Compiling: Specially processing code for speed.

** Evaluation: Running a program.
*** How the Interpreter Acts: Returns and Side Effects...
*** Evaluating Inner Lists: Lists within lists...

** Variables: Returning a value from a variable.
*** fill-column Example	
*** Void Function: The error message for a symbol without a function.
*** Void Variable: The error message for a symbol without a value.

** Arguments: Passing information to a function.
*** Data types: Types of data passed to a function.
*** Args as Variable or List: An argument can be the value of a variable or list.
*** Variable Number of Arguments: Some functions may take a variable number of arguments.
*** Wrong Type of Argument: Passing an argument of the wrong type to a function.
*** message: A useful function for sending messages.

** _set_ & _setq_: Setting the value of a variable.
*** Using _set_: Setting values.
*** Using _setq_: Setting a quoted value.
*** Counting: Using setq to count.

** Summary: The major points.
** Error Message Exercises

* Practicing Evaluation: Running several programs.
* Writing Defuns: How to write function definitions.
* Buffer Walk Through: Exploring a few buffer-related functions.
* More Complex: A few, even more complex functions.
* Narrowing & Widening: Restricting your and Emacs attention to a region.
* _car_ _cdr_ & _cons_: Fundamental functions in Lisp.
* Cutting & Storing Text: Removing text and saving it.
* List Implementation: How lists are implemented in the computer.
* Yanking: Pasting stored text.
* Loops & Recursion: How to repeat a process.
* Regexp Search: Regular expression searches.
* Counting Words: A review of repetition and regexps.
* Words in a defun: Counting words in a defun.
* Readying a Graph: A prototype graph printing function.
* Emacs Initialization: How to write a .emacs file.
* Debugging: How to run the Emacs Lisp debuggers.
* Conclusion: Now you have the basics.
* the-the: An appendix: how to find reduplicated words.
* Kill Ring: An appendix: how the kill ring works.
* Full Graph: How to create a graph with labeled axes.
* Free Software and Free Manuals	
* GNU Free Documentation License	
* Index	
* About the Author	
