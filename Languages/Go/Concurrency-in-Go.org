#+TITLE: Concurrency in Go
#+SUBTITLE: Tools and Techniques for Developers
#+YEAR: 2017
#+VERSION: 1st
#+AUTHOR: Katherine Cox-Buday
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Preface - vii][Preface - vii]]
- [[1. An Introduction to Concurrency - 1][1. An Introduction to Concurrency - 1]]
  - [[Moore's Law, Web Scale, and the Mess We're In - 2][Moore's Law, Web Scale, and the Mess We're In - 2]]
  - [[Why Is Concurrency Hard? - 4][Why Is Concurrency Hard? - 4]]
    - [[Race Conditions - 4][Race Conditions - 4]]
    - [[Atomicity - 6][Atomicity - 6]]
    - [[Memory Access Synchronization - 8][Memory Access Synchronization - 8]]
    - [[Deadlocks, Livelocks, and Starvation - 10][Deadlocks, Livelocks, and Starvation - 10]]
      - [[Deadlocks - 10][Deadlocks - 10]]
      - [[Livelocks - 13][Livelocks - 13]]
      - [[Starvation - 16][Starvation - 16]]
    - [[Determining Concurrency Safety - 18][Determining Concurrency Safety - 18]]
  - [[Simplicity in the Face of Complexity - 20][Simplicity in the Face of Complexity - 20]]
- [[2. Modeling Your Code: Communicating Sequential Processes - 23][2. Modeling Your Code: Communicating Sequential Processes - 23]]
  - [[The Difference Between Concurrency and Parallelism - 23][The Difference Between Concurrency and Parallelism - 23]]
  - [[What Is CSP? - 26][What Is CSP? - 26]]
  - [[How This Helps You - 29][How This Helps You - 29]]
  - [[Go's Philosophy on Concurrency - 31][Go's Philosophy on Concurrency - 31]]
- [[3. Go's Concurrency Building Blocks - 37][3. Go's Concurrency Building Blocks - 37]]
  - [[Goroutines - 37][Goroutines - 37]]
  - [[The ~sync~ Package - 47][The ~sync~ Package - 47]]
    - [[WaitGroup - 47][WaitGroup - 47]]
    - [[Mutex and RWMutex - 49][Mutex and RWMutex - 49]]
    - [[Cond - 52][Cond - 52]]
    - [[Once - 57][Once - 57]]
    - [[Pool - 59][Pool - 59]]
  - [[Channels - 64][Channels - 64]]
  - [[The ~select~ Statement - 78][The ~select~ Statement - 78]]
  - [[The ~GOMAXPROCS~ Lever - 83][The ~GOMAXPROCS~ Lever - 83]]
  - [[Conclusion - 83][Conclusion - 83]]
- [[4. Concurrency Patterns in Go - 85][4. Concurrency Patterns in Go - 85]]
  - [[Confinement - 85][Confinement - 85]]
  - [[The for-select Loop - 89][The for-select Loop - 89]]
  - [[Preventing Goroutine Leaks - 90][Preventing Goroutine Leaks - 90]]
  - [[The or-channel - 94][The or-channel - 94]]
  - [[Error Handling - 97][Error Handling - 97]]
  - [[Pipelines - 100][Pipelines - 100]]
    - [[Best Practices for Constructing Pipelines - 104][Best Practices for Constructing Pipelines - 104]]
    - [[Some Handy Generators - 109][Some Handy Generators - 109]]
  - [[Fan-Out, Fan-In - 114][Fan-Out, Fan-In - 114]]
  - [[The or-done-channel - 119][The or-done-channel - 119]]
  - [[The tee-channel - 120][The tee-channel - 120]]
  - [[The bridge-channel - 122][The bridge-channel - 122]]
  - [[Queuing - 124][Queuing - 124]]
  - [[The context Package - 131][The context Package - 131]]
  - [[Summary - 145][Summary - 145]]
- [[5. Concurrency at Scale - 147][5. Concurrency at Scale - 147]]
  - [[Error Propagation - 147][Error Propagation - 147]]
  - [[Timeouts and Cancellation - 155][Timeouts and Cancellation - 155]]
  - [[Heartbeats - 161][Heartbeats - 161]]
  - [[Replicated Requests - 172][Replicated Requests - 172]]
  - [[Rate Limiting - 174][Rate Limiting - 174]]
  - [[Healing Unhealthy Goroutines - 188][Healing Unhealthy Goroutines - 188]]
  - [[Summary - 194][Summary - 194]]
- [[6. Goroutines and the Go Runtime - 197][6. Goroutines and the Go Runtime - 197]]
  - [[Work Stealing - 197][Work Stealing - 197]]
    - [[Stealing Tasks or Continuations? - 204][Stealing Tasks or Continuations? - 204]]
  - [[Presenting All of This to the Developer - 212][Presenting All of This to the Developer - 212]]
  - [[Conclusion - 212][Conclusion - 212]]
- [[A. Appendix - 213][A. Appendix - 213]]
  - [[Anatomy of a Goroutine Error - 213][Anatomy of a Goroutine Error - 213]]
  - [[Race Detection - 208][Race Detection - 208]]
  - [[pprof - 210][pprof - 210]]
- [[Index - 219][Index - 219]]

* Preface - vii
* 1. An Introduction to Concurrency - 1
** Moore's Law, Web Scale, and the Mess We're In - 2
** Why Is Concurrency Hard? - 4
*** Race Conditions - 4
*** Atomicity - 6
    - *Fun Fact*

*** Memory Access Synchronization - 8
*** Deadlocks, Livelocks, and Starvation - 10
**** Deadlocks - 10
**** Livelocks - 13
**** Starvation - 16

*** Determining Concurrency Safety - 18

** Simplicity in the Face of Complexity - 20

* 2. Modeling Your Code: Communicating Sequential Processes - 23
** The Difference Between Concurrency and Parallelism - 23
** What Is CSP? - 26
** How This Helps You - 29
** Go's Philosophy on Concurrency - 31

* 3. Go's Concurrency Building Blocks - 37
** Goroutines - 37
** The ~sync~ Package - 47
*** WaitGroup - 47
*** Mutex and RWMutex - 49
*** Cond - 52
*** Once - 57
*** Pool - 59

** Channels - 64
** The ~select~ Statement - 78
** The ~GOMAXPROCS~ Lever - 83
** Conclusion - 83

* 4. Concurrency Patterns in Go - 85
** Confinement - 85
** The for-select Loop - 89
** Preventing Goroutine Leaks - 90
** The or-channel - 94
** Error Handling - 97
** Pipelines - 100
*** Best Practices for Constructing Pipelines - 104
*** Some Handy Generators - 109

** Fan-Out, Fan-In - 114
** The or-done-channel - 119
** The tee-channel - 120
** The bridge-channel - 122
** Queuing - 124
** The context Package - 131
** Summary - 145

* 5. Concurrency at Scale - 147
** Error Propagation - 147
** Timeouts and Cancellation - 155
** Heartbeats - 161
** Replicated Requests - 172
** Rate Limiting - 174
** Healing Unhealthy Goroutines - 188
** Summary - 194

* 6. Goroutines and the Go Runtime - 197
** Work Stealing - 197
*** Stealing Tasks or Continuations? - 204

** Presenting All of This to the Developer - 212
** Conclusion - 212

* A. Appendix - 213
** Anatomy of a Goroutine Error - 213
** Race Detection - 208
** pprof - 210

* Index - 219
