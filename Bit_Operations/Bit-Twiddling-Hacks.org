#+TITLE: Bit Twiddling Hacks
#+COPYRIGHT: 1997 - 2005
#+AUTHOR: Sean Eron Anderson (seander@cs.stanford.edu)
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[About the operation counting methodology][About the operation counting methodology]]
- [[Compute the sign of an integer][Compute the sign of an integer]]
- [[Detect if two integers have opposite signs][Detect if two integers have opposite signs]]
- [[[C]    Compute the integer absolute value (abs) without branching][[C]    Compute the integer absolute value (abs) without branching]]
- [[[Rust] Compute the integer absolute value (abs) without branching][[Rust] Compute the integer absolute value (abs) without branching]]
- [[[C]    Compute the minimum (min) or maximum (max) of two integers without branching][[C]    Compute the minimum (min) or maximum (max) of two integers without branching]]
- [[[Rust] Compute the minimum (min) or maximum (max) of two integers without branching][[Rust] Compute the minimum (min) or maximum (max) of two integers without branching]]
- [[[C]    Determining if an integer is a power of 2][[C]    Determining if an integer is a power of 2]]
- [[[Rust] Determining if an integer is a power of 2][[Rust] Determining if an integer is a power of 2]]
- [[Sign extending][Sign extending]]
  - [[Sign extending from a constant bit-width][Sign extending from a constant bit-width]]
  - [[Sign extending from a variable bit-width][Sign extending from a variable bit-width]]
  - [[Sign extending from a variable bit-width in 3 operations][Sign extending from a variable bit-width in 3 operations]]
- [[Conditionally set or clear bits without branching][Conditionally set or clear bits without branching]]
- [[Conditionally negate a value without branching][Conditionally negate a value without branching]]
- [[Merge bits from two values according to a mask][Merge bits from two values according to a mask]]
- [[Counting bits set][Counting bits set]]
  - [[Counting bits set, naive way][Counting bits set, naive way]]
  - [[Counting bits set by lookup table][Counting bits set by lookup table]]
  - [[Counting bits set, Brian Kernighan's way][Counting bits set, Brian Kernighan's way]]
  - [[Counting bits set in 14, 24, or 32-bit words using 64-bit instructions][Counting bits set in 14, 24, or 32-bit words using 64-bit instructions]]
  - [[Counting bits set, in parallel][Counting bits set, in parallel]]
  - [[Count bits set (rank) from the most-significant bit upto a given position][Count bits set (rank) from the most-significant bit upto a given position]]
  - [[Select the bit position (from the most-significant bit) with the given count (rank)][Select the bit position (from the most-significant bit) with the given count (rank)]]
- [[Computing parity (1 if an odd number of bits set, 0 otherwise)][Computing parity (1 if an odd number of bits set, 0 otherwise)]]
  - [[Compute parity of a word the naive way][Compute parity of a word the naive way]]
  - [[Compute parity by lookup table][Compute parity by lookup table]]
  - [[Compute parity of a byte using 64-bit multiply and modulus division][Compute parity of a byte using 64-bit multiply and modulus division]]
  - [[Compute parity of word with a multiply][Compute parity of word with a multiply]]
  - [[Compute parity in parallel][Compute parity in parallel]]
- [[Swapping Values][Swapping Values]]
  - [[Swapping values with subtraction and addition][Swapping values with subtraction and addition]]
  - [[Swapping values with XOR][Swapping values with XOR]]
  - [[Swapping individual bits with XOR][Swapping individual bits with XOR]]
- [[Reversing bit sequences][Reversing bit sequences]]
  - [[Reverse bits the obvious way][Reverse bits the obvious way]]
  - [[Reverse bits in word by lookup table][Reverse bits in word by lookup table]]
  - [[Reverse the bits in a byte with 3 operations (64-bit multiply and modulus division)][Reverse the bits in a byte with 3 operations (64-bit multiply and modulus division)]]
  - [[Reverse the bits in a byte with 4 operations (64-bit multiply, no division)][Reverse the bits in a byte with 4 operations (64-bit multiply, no division)]]
  - [[Reverse the bits in a byte with 7 operations (no 64-bit, only 32)][Reverse the bits in a byte with 7 operations (no 64-bit, only 32)]]
  - [[Reverse an N-bit quantity in parallel with 5 * lg(N) operations][Reverse an N-bit quantity in parallel with 5 * lg(N) operations]]
- [[Modulus division (aka computing remainders)][Modulus division (aka computing remainders)]]
  - [[Computing modulus division by 1 << s without a division operation (obvious)][Computing modulus division by 1 << s without a division operation (obvious)]]
  - [[Computing modulus division by (1 << s) - 1 without a division operation][Computing modulus division by (1 << s) - 1 without a division operation]]
  - [[Computing modulus division by (1 << s) - 1 in parallel without a division operation][Computing modulus division by (1 << s) - 1 in parallel without a division operation]]
- [[Finding integer log base 2 of an integer (aka the position of the highest bit set)][Finding integer log base 2 of an integer (aka the position of the highest bit set)]]
  - [[Find the log base 2 of an integer with the MSB N set in O(N) operations (the obvious way)][Find the log base 2 of an integer with the MSB N set in O(N) operations (the obvious way)]]
  - [[Find the integer log base 2 of an integer with an 64-bit IEEE float][Find the integer log base 2 of an integer with an 64-bit IEEE float]]
  - [[Find the log base 2 of an integer with a lookup table][Find the log base 2 of an integer with a lookup table]]
  - [[Find the log base 2 of an N-bit integer in O(lg(N)) operations][Find the log base 2 of an N-bit integer in O(lg(N)) operations]]
  - [[Find the log base 2 of an N-bit integer in O(lg(N)) operations with multiply and lookup][Find the log base 2 of an N-bit integer in O(lg(N)) operations with multiply and lookup]]
- [[Find integer log base 10 of an integer][Find integer log base 10 of an integer]]
- [[Find integer log base 10 of an integer the obvious way][Find integer log base 10 of an integer the obvious way]]
- [[Find integer log base 2 of a 32-bit IEEE float][Find integer log base 2 of a 32-bit IEEE float]]
- [[Find integer log base 2 of the pow(2, r)-root of a 32-bit IEEE float (for unsigned integer r)][Find integer log base 2 of the pow(2, r)-root of a 32-bit IEEE float (for unsigned integer r)]]
- [[Counting consecutive trailing zero bits (or finding bit indices)][Counting consecutive trailing zero bits (or finding bit indices)]]
  - [[Count the consecutive zero bits (trailing) on the right linearly][Count the consecutive zero bits (trailing) on the right linearly]]
  - [[Count the consecutive zero bits (trailing) on the right in parallel][Count the consecutive zero bits (trailing) on the right in parallel]]
  - [[Count the consecutive zero bits (trailing) on the right by binary search][Count the consecutive zero bits (trailing) on the right by binary search]]
  - [[Count the consecutive zero bits (trailing) on the right by casting to a float][Count the consecutive zero bits (trailing) on the right by casting to a float]]
  - [[Count the consecutive zero bits (trailing) on the right with modulus division and lookup][Count the consecutive zero bits (trailing) on the right with modulus division and lookup]]
  - [[Count the consecutive zero bits (trailing) on the right with multiply and lookup][Count the consecutive zero bits (trailing) on the right with multiply and lookup]]
- [[Round up to the next highest power of 2 by float casting][Round up to the next highest power of 2 by float casting]]
- [[Round up to the next highest power of 2][Round up to the next highest power of 2]]
- [[Interleaving bits (aka computing Morton Numbers)][Interleaving bits (aka computing Morton Numbers)]]
  - [[Interleave bits the obvious way][Interleave bits the obvious way]]
  - [[Interleave bits by table lookup][Interleave bits by table lookup]]
  - [[Interleave bits with 64-bit multiply][Interleave bits with 64-bit multiply]]
  - [[Interleave bits by Binary Magic Numbers][Interleave bits by Binary Magic Numbers]]
- [[Testing for ranges of bytes in a word (and counting occurances found)][Testing for ranges of bytes in a word (and counting occurances found)]]
  - [[Determine if a word has a zero byte][Determine if a word has a zero byte]]
  - [[Determine if a word has a byte equal to n][Determine if a word has a byte equal to n]]
  - [[Determine if a word has byte less than n][Determine if a word has byte less than n]]
  - [[Determine if a word has a byte greater than n][Determine if a word has a byte greater than n]]
  - [[Determine if a word has a byte between m and n][Determine if a word has a byte between m and n]]
- [[Compute the lexicographically next bit permutation][Compute the lexicographically next bit permutation]]

* TODO About the operation counting methodology
* TODO Compute the sign of an integer
* DONE Detect if two integers have opposite signs
  CLOSED: [2019-01-22 Tue 18:37]
  Manfred Weis suggested I add this entry on Nov. 26th, 2009:
  #+begin_src rust
    // integer `x` and `y`
    bool f = ((x ^ y) < 0);
  #+end_src

* TODO [C]    Compute the integer absolute value (abs) without branching
* TODO [Rust] Compute the integer absolute value (abs) without branching
  #+begin_src rust
    // TODO:

    extern crate num;
    use num::Num;

    use std::mem;


    fn abs<T: Num>(v: T) {
        T mask = v >> mem::size_of::<T>() * CHAR_BIT - 1;
        (v + mask) ^ mask;
    }
  #+end_src

* TODO [C]    Compute the minimum (min) or maximum (max) of two integers without branching
* TODO [Rust] Compute the minimum (min) or maximum (max) of two integers without branching
* DONE [C]    Determining if an integer is a power of 2
  CLOSED: [2019-01-22 Tue 19:20]
  #+begin_src c
    // unsigned
    f = v != 0 && (v & (v - 1)) == 0;

    // signed
    f = w > 0 && (w & (w - 1)) == 0;
  #+end_src

* TODO [Rust] Determining if an integer is a power of 2
  #+begin_src rust
    //  UNSIGNED integer `v`
    bool fu = v != 0 && (v & (v - 1)) == 0;

    //  SIGNED integer `w`
    bool fi = w > 0 && (w & (w - 1)) == 0;
  #+end_src

* TODO Sign extending
** Sign extending from a constant bit-width
** Sign extending from a variable bit-width
** Sign extending from a variable bit-width in 3 operations

* TODO Conditionally set or clear bits without branching
* TODO Conditionally negate a value without branching
* TODO Merge bits from two values according to a mask
* TODO Counting bits set
** Counting bits set, naive way
** Counting bits set by lookup table
** Counting bits set, Brian Kernighan's way
** Counting bits set in 14, 24, or 32-bit words using 64-bit instructions
** Counting bits set, in parallel
** Count bits set (rank) from the most-significant bit upto a given position
** Select the bit position (from the most-significant bit) with the given count (rank)

* TODO Computing parity (1 if an odd number of bits set, 0 otherwise)
** Compute parity of a word the naive way
** Compute parity by lookup table
** Compute parity of a byte using 64-bit multiply and modulus division
** Compute parity of word with a multiply
** Compute parity in parallel

* TODO Swapping Values
** Swapping values with subtraction and addition
** Swapping values with XOR
** Swapping individual bits with XOR

* TODO Reversing bit sequences
** Reverse bits the obvious way
** Reverse bits in word by lookup table
** Reverse the bits in a byte with 3 operations (64-bit multiply and modulus division)
** Reverse the bits in a byte with 4 operations (64-bit multiply, no division)
** Reverse the bits in a byte with 7 operations (no 64-bit, only 32)
** Reverse an N-bit quantity in parallel with 5 * lg(N) operations

* TODO Modulus division (aka computing remainders)
** Computing modulus division by 1 << s without a division operation (obvious)
** Computing modulus division by (1 << s) - 1 without a division operation
** Computing modulus division by (1 << s) - 1 in parallel without a division operation

* TODO Finding integer log base 2 of an integer (aka the position of the highest bit set)
** Find the log base 2 of an integer with the MSB N set in O(N) operations (the obvious way)
** Find the integer log base 2 of an integer with an 64-bit IEEE float
** Find the log base 2 of an integer with a lookup table
** Find the log base 2 of an N-bit integer in O(lg(N)) operations
** Find the log base 2 of an N-bit integer in O(lg(N)) operations with multiply and lookup

* TODO Find integer log base 10 of an integer
* TODO Find integer log base 10 of an integer the obvious way
* TODO Find integer log base 2 of a 32-bit IEEE float
* TODO Find integer log base 2 of the pow(2, r)-root of a 32-bit IEEE float (for unsigned integer r)
* TODO Counting consecutive trailing zero bits (or finding bit indices)
** Count the consecutive zero bits (trailing) on the right linearly
** Count the consecutive zero bits (trailing) on the right in parallel
** Count the consecutive zero bits (trailing) on the right by binary search
** Count the consecutive zero bits (trailing) on the right by casting to a float
** Count the consecutive zero bits (trailing) on the right with modulus division and lookup
** Count the consecutive zero bits (trailing) on the right with multiply and lookup

* TODO Round up to the next highest power of 2 by float casting
* TODO Round up to the next highest power of 2
* TODO Interleaving bits (aka computing Morton Numbers)
** Interleave bits the obvious way
** Interleave bits by table lookup
** Interleave bits with 64-bit multiply
** Interleave bits by Binary Magic Numbers

* TODO Testing for ranges of bytes in a word (and counting occurances found)
** Determine if a word has a zero byte
** Determine if a word has a byte equal to n
** Determine if a word has byte less than n
** Determine if a word has a byte greater than n
** Determine if a word has a byte between m and n

* TODO Compute the lexicographically next bit permutation
