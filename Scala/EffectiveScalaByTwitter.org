#+TITLE: Effective Scala
#+VERSION: 20XX
#+AUTHOR: Marius Eriksen
#+ORGANIZATION: Twitter Inc.
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Introduction][Introduction]]
- [[Formatting: Whitespace, Naming, Imports, Braces, Pattern matching, Comments][Formatting: Whitespace, Naming, Imports, Braces, Pattern matching, Comments]]
- [[Types and Generics: Return type annotations, Variance, Type aliases, Implicits][Types and Generics: Return type annotations, Variance, Type aliases, Implicits]]
- [[Collections: Hierarchy, Use, Style, Performance, Java Collections][Collections: Hierarchy, Use, Style, Performance, Java Collections]]
- [[Concurrency: Futures, Collections][Concurrency: Futures, Collections]]
- [[Control structures: Recursion, Returns, for loops and comprehensions, require and assert][Control structures: Recursion, Returns, for loops and comprehensions, require and assert]]
- [[Functional programming: Case classes as algebraic data types, Options, Pattern matching, Partial][Functional programming: Case classes as algebraic data types, Options, Pattern matching, Partial]]
- [[functions, Destructuring bindings, Laziness, Call by name, flatMap][functions, Destructuring bindings, Laziness, Call by name, flatMap]]
- [[Object oriented programming: Dependency injection, Traits, Visibility, Structural typing][Object oriented programming: Dependency injection, Traits, Visibility, Structural typing]]
- [[Error handling: Handling exceptions][Error handling: Handling exceptions]]
- [[Garbage collection][Garbage collection]]
- [[Java compatibility][Java compatibility]]
- [[Twitter’s standard libraries: Futures, Offer/Broker][Twitter’s standard libraries: Futures, Offer/Broker]]
- [[Acknowledgments][Acknowledgments]]

* Introduction
* Formatting: Whitespace, Naming, Imports, Braces, Pattern matching, Comments
* Types and Generics: Return type annotations, Variance, Type aliases, Implicits
* Collections: Hierarchy, Use, Style, Performance, Java Collections
* Concurrency: Futures, Collections
* Control structures: Recursion, Returns, for loops and comprehensions, require and assert
* Functional programming: Case classes as algebraic data types, Options, Pattern matching, Partial
* functions, Destructuring bindings, Laziness, Call by name, flatMap
* Object oriented programming: Dependency injection, Traits, Visibility, Structural typing
* Error handling: Handling exceptions
* Garbage collection
* Java compatibility
* Twitter’s standard libraries: Futures, Offer/Broker
* Acknowledgments
