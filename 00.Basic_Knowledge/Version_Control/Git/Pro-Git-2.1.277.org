#+TITLE: Pro Git
#+AUTHOR: Scott Chacon, Ben Straub
#+Version: 2.1.277, 2020-12-01
#+STARTUP: overview
#+STARTUP: entitiespretty

* Licence - 1
* Preface by Scoot Chacon - 2
* Preface by Ben Straub - 3
* Dedications - 4
* Contributors - 5
* Introduction - 7
* DONE 1. Getting Started - 9
  CLOSED: [2019-05-21 Tue 11:50]
** TODO 1.1 About Version Control - 9
*** TODO Local Version Control Systems - 9
*** TODO Centralized Version Control Systems - 10
*** TODO Distributed Version Control Systems - 11

** DONE 1.2 A Short History of Git - 13
   CLOSED: [2017-07-14 Fri 05:26]
   Birth in 2005

** DONE 1.3 What is Git? - 13
   CLOSED: [2019-08-17 Sat 21:41]
*** DONE Snapshots, Not Differences  13
    CLOSED: [2017-07-14 Fri 04:18]
    - /The other VCS/ (/Subversion/ and friends included) store info as a list of
      file-based changes.

      These systems (CVS, Subversion, Perforce, Bazaar, and so on) think of the
      info they keep as a set of files and the changes made to each file over
      time.

    - /Git/ thinks about its data more like a _stream of snapshots_.
      NO-change files won't be save again, only create a link to it.

*** DONE Nearly Every Operation Is Local - 14
    CLOSED: [2017-07-14 Fri 04:21]
    This is also the main difference between /Git/ and the other VCS's.

*** DONE Git Has Integrity - 15
    CLOSED: [2017-07-14 Fri 04:37]
    - Everything in Git is _check-summed_ before it is stored and is then
      referred to by that /checksum/ -- impossible to make change without Git
      knowing about it.

    - Git uses SHA-1 hash for this checksumming (40-character hex).

*** DONE Git Generally Only Adds Data - 15
    CLOSED: [2017-07-14 Fri 04:42]
    As in any VCS, you can lose or mess up changes you haven't committed yet;
    but after you commit a snapshot into Git, it is very difficult to lose.

    =TODO= Any exception.

*** DONE The Three States - 15
    CLOSED: [2017-07-14 Fri 05:05]
    Git has _THREE_ main states that your file can reside in:
    + /committed/ :: the data is safely stored in your local database.
    + /modified/ :: file(s) has/have been changed but _NOT_ committed.
    + /staged/ :: marked a /modified/ file in its current version to go
                  into your next commit snapshot.

    See Figure 1-6. (page 8)

    This leads us to the three main sections of a Git project:
    + the =.git= directory (Repository):
      _where_ Git stores the metadata and object database for your project.
      This is _the most important part_ of Git, and it is what is copied when you
      clone a repository from another computer.

    + the working directory:
      a single checkout of one version of the project.
      These files are pulled out of the compressed database in the Git directory
      and placed on disk for you to use or modify.

    + the staging area:
      a file, generally contained in your =.git= directory, that stores
      information about what will go into your next commit. It's sometimes
      referred to as the "index", but it's also common to refer to it as the
      staging area.

** DONE 1.4 The Command Line - 17
   CLOSED: [2017-07-14 Fri 05:10]
   For this book, we will be using Git on the command line.

** DONE 1.5 Installing Git - 17
   CLOSED: [2017-07-14 Fri 05:10]
   This book was written using Git version 2.0.0.
   Any version after 2.0 should work just fine.

*** Installing on Linux - 17
*** Installing on Mac - 18
*** Installing on Windows - 18
*** Installing from Source - 19

** DONE 1.6 First-Time Git Setup - 20
   CLOSED: [2017-07-14 Fri 05:21]
*** DONE Your Identity - 21
    CLOSED: [2017-07-14 Fri 05:15]
    #+BEGIN_SRC bash
      git config --global user.name "John Doe"
      git config --global user.email johndoe@example.com
    #+END_SRC

    Run with ~--global~ to override the ~config~ in a local project.

*** DONE Your Editor - 21
    CLOSED: [2017-07-14 Fri 05:20]
    #+BEGIN_SRC bash
      git config --global core.editor emacs
      # or
      git config --global core.editor vim
    #+END_SRC
    =Me= I think no one needd a local editor setting.

*** DONE Checking Your Settings - 22
    CLOSED: [2017-07-14 Fri 05:21]
    #+BEGIN_SRC bash
      git config --list
      # user.name=John Doe
      # user.email=johndoe@example.com
      # color.status=auto
      # color.branch=auto
      # color.interactive=auto
      # color.diff=auto
      # ...

      git config user.name
      # John Doe
    #+END_SRC

** DONE 1.7 Getting Help - 23
   CLOSED: [2017-07-14 Fri 05:13]
   #+BEGIN_SRC bash
     git help <verb>
     git <verb> --help
     man git-<verb>
   #+END_SRC

   You can also try the =#git= or =#github= channel on the Freenode IRC server
   (irc. freenode.net).

** DONE 1.8 Summary - 24
   CLOSED: [2017-07-14 Fri 05:14]

* TODO 2. Git Basics - 25
  If you can read only one chapter to get going with Git, this is it.

  - By the end of the chapter, you should be able to:
    + configure and initialize a repository
    + begin and stop tracking files
    + stage and commit changes
    + set up Git to ignore certain files and file patterns
    + undo mistakes quickly and easily
    + browse the history of your project and view changes between commits
    + push and pull from remote repositories

** DONE 2.1 Getting a Git Repository - 25
   CLOSED: [2017-07-15 Sat 14:07]
   Two main approaches:
   1. The first takes an existing project or directory and imports it into Git.
   2. The second clones an existing Git repository from another server.

*** DONE Initializing a Repository in an Existing Directory - 25
    CLOSED: [2017-07-15 Sat 14:07]
    - ~git init~
      TODO What files are in the =.git= folder.

    - Add and commit:
      #+BEGIN_SRC bash
        git add *.c
        git add LICENSE
        git commit -m 'initial project version'
      #+END_SRC

*** DONE Cloning an Existing Repository - 26
    CLOSED: [2017-07-15 Sat 14:07]
    ~git clone <from> [<to>]~

** DONE 2.2 Recording Changes to the Repository - 27
   CLOSED: [2019-08-19 Mon 00:21]
   - Each file in your working directory can be in one of two states:
     + tracked
     + untracked

   - _Tracked files_ are files that were in the last snapshot;
     They can be
     + unmodified
     + modified
     + staged.

   - _Untracked files_ are everything else -- any files in your working directory
     that were
     + NOT in your last snapshot
     + NOT in your staging area

   - Figure 2-1. The lifecycle of the status of your files
     _Untracked_ ------> _Unmodified_ ------> _Modified_ -------> _Staged_
         |--add the file-------------------------------------------->|
         |                    |--Edit the file-->|                   |
         |                    |                  |--Stage the file-->|
         |<--Remove the file--|                  |                   |
         |                    |<--------------------commit-----------|

*** DONE Checking the Status of Your Files - 27
    CLOSED: [2017-07-16 Sun 22:58]
    ~git status~

*** DONE Tracking New Files - 28
    CLOSED: [2017-07-16 Sun 22:58]
    ~git add [<filename(s)> | <directory>]~
    ~git add~ works recursively.

*** DONE Staging Modified Files - 29
    CLOSED: [2017-07-16 Sun 23:10]
    - ~git add~ is a multipurpose command -- you use it
      + to begin tracking new files
      + to stage files
      + to do other things like marking merge-conflicted files as resolved. =TODO=

    - It may be helpful to think of it
      _more as_ "add this content to the next commit"
      _rather than_ "add this file to the project".

    - A file can be /staged/ and /unstaged/ simutaneously:
      If you staged a change in a file and modified this file again before
      committing, then this file is marked as /staged/ and /unstaged/, which
      actually means some change is /staged/ and some change is /unstaged/.

*** DONE Short Status - 30
    CLOSED: [2019-05-21 Tue 15:53]
    - Command:
      ~git status --short~ or ~git status -s~

    - Case study:
      #+BEGIN_SRC text
         M README
        MM Rakefile
        A  lib/git.rb
        M  lib/simplegit.rb
        ?? LICENSE.txt
      #+END_SRC
      + _??_ : _untracked_ file
      + _A _: new files that have been added to the staging area have an A,
      + M: modified files have an M and so on.
           There are _TWO columns_ to the output --
        * left column: the file is staged
        * right column: the file is modified

    - So for example in that output,
      + =README=
        is _modified_ in the working directory but _not yet staged_,

      + =lib/simplegit.rb=:
        is _modified_ and _staged_.

      + =Rakefile=:
        was _modified_, _staged_ and then _modified again_, so there are
        changes to it that are _BOTH staged and unstaged_.

*** DONE Ignoring Files - 31
    CLOSED: [2019-05-21 Tue 16:59]
    Use =.gitignore= file to tell git the files you don't want to track or even
    show.

    - You usually don't want to see some automatically

    - The _rules for the patterns_ you can put in the =.gitignore= file are as follows:
      + Blank lines or lines starting with # are ignored.

      + Standard glob patterns =???= work, and will be applied _recursively throughout
        the entire working tree_.

      + You can _start_ patterns with a forward slash (/) to *AVOID recursivity*.

      + You can _end_ patterns with a forward slash (/) to _specify a directory_.

      + You can _negate_ a pattern by _starting_ it with an exclamation point (~!~).

    - Glob patterns are LIKE _simplified regular expressions_ that shells use.
      + ~*~ matches zero or more characters

      + ~[abc]~ matches any character inside the brackets (in this case ~a~, ~b~,
        or ~c~)

      + ~?~ matches a single character

      + Patterns like ~[0-9]~ matches any character between them _inclusively_

      + ~**~ matches _nested directories_.
        For instance, ~a/**/z~ would match ~a/z~, ~a/b/z~, ~a/b/c/z~, and so on.

    - Case Study:
      #+begin_src gitignore
        # ignore all .a files
        ,*.a

        # but do track lib.a, even though you're ignoring .a files above
        !lib.a

        # only ignore the TODO file in the current directory, not subdir/TODO
        /TODO

        # ignore all files in any directory named build
        build/

        # ignore doc/notes.txt, but not doc/server/arch.txt
        doc/*.txt

        # ignore all .pdf files in the doc/ directory and any of its subdirectories
        doc/**/*.pdf
      #+end_src

    - *Tips*
       GitHub maintains a fairly comprehensive list of good =.gitignore= file
       examples for dozens of projects and languages at
      https://github.com/github/gitignore.
      _Pick one at the start point of your project._

    - *CAUTION*
      You can have only one =.gitignore= in the root of your simple project.
      However, it is also possible to have _ADDITIONAL_ =.gitignore= files in
      subdirectories.
        The rules in these nested =.gitignore= files apply only to the files
      under the directory where they are located.

      Use ~man gitignore~ for the details.

*** DONE Viewing Your Staged and Unstaged Changes - 32
    CLOSED: [2019-08-19 Mon 00:20]
    ~git diff~ show more details than ~git status~.
    - ~git diff~ shows you the exact lines added and removed -- the patch, as it
      were.

    - You probably use ~git diff~ most often to answer two questions:
      + Q :: What have you changed but not yet staged? --
             =from Jian= compare _not staged changes_ with branch head.

      + Q :: What have you staged that you are about to commit? --
             =from Jian= compare _staged changes_ with branch head.

    - For example,
      _edited and staged_ =README= and _edited_ =CONTRIBUTING.md=
      + ~git diff~ compare =CONTRIBUTING.md= with branch head
      + ~git diff --staged~ compare =README= with branch head

    - *Git Diff in an External Tool*
      - If you want to view the differences in diff viewing program, use ~git
        difftool~ instead.

      - Run ~git difftool --tool-help~ to see what is available on your system.

*** DONE Committing Your Changes - 35
    CLOSED: [2019-05-21 Tue 17:11]
    - Command:
      + ~git commit~:
        usually open the editor ~git config --global core.editor~, and you can
        type the commit message inside it. You will see it automatically put the
        change info in the comment. You can keep it or delete it.

      + ~git commit -v~:
        Just like the command above, but in verbose mode -- the comment includes
        more info like the diff result.

      + ~git commit -m~:
        Do not open editor, and provide a inline message that follows the ~-m~
        parameter.

    - After committing, you'll see an SHA-1 checksum.
      =TODO= SHA-1???

*** DONE Skipping the Staging Area - 36
    CLOSED: [2019-05-21 Tue 17:23]
    You can use a ~-a~ option when you work with ~git commit~ command, and
    _AUTOMATICALLY /stage/ EVERY file that is already tracked_ before doing the
    commit.
    For instance, ~git commit -a -m 'added new benchmarks~

    This is convenient, but it can also mass up your commit if you don't pay
    enough attension or overuse it.

*** DONE Removing Files - 37
    CLOSED: [2019-08-18 Sun 00:11]
    ~git rm~
    - If you delete a file with using ~git rm~,
      ~git stauts~ will tell you =Changes not staged for commit=
      + To stage it, you need use ~git rm <filename>~ again, even if you can't
        see the deleted file(s) in your repo.

      + If you use ~git rm~ from the very beginning, you need need to run
        ~rm <filename>~ followed by ~git rm <filename>~.

    - After running ~git rm <filename>~, the next time you commit, the file will
      be gone and no longer tracked.

    - ~git rm -f~
      If you _modified the file_ or _had already added it to the staging area_,
      you *MUST FORCE* the removal with the ~-f~ option.
      + Rationale:
        This is a *safety feature* to PREVENT
        _accidental removal of data that hasn't yet been recorded in a snapshot
        and that can't be recovered from Git._

    - ~git rm --cached~ remove file(s) from your /staging area/ but keep the file(s)
      in your working tree -- no longer track it.
      + This is particularly useful if you forgot to add something to your
        =.gitignore= file and accidentally staged it.

    - With file-glob patterns:
      ~git rm log/\*.log~
      The backslash (~\~) here is used to escape the ~*~ to stop doing shell
      expansion, and pass ~*~ to git, who has its own expansion.
      + =from Jian=
        Shell expansion also works. However, since I don't know the differences,
        and I believe let git to all the operations it can do is good for
        version control.

*** DONE Moving Files - 38
    CLOSED: [2019-08-17 Sat 22:01]
    - _UNLIKE_ many other VCS systems,
      Git does *NOT explicitly track* file movement.

    - If you rename a file in Git, no metadata is stored in Git that tells it you
      renamed the file.
        However, _Git is pretty smart about figuring that out after the fact_ --
      TODO we'll deal with detecting file movement a bit later.

    - Git has a ~mv~ command. For example,
      #+begin_src bash
        git mv README.md README
      #+end_src
      Then, run ~git status~ and you'll see:
      #+begin_src text
        On branch master
        Your branch is up-to-date with 'origin/master'.
        Changes to be committed:
          (use "git reset HEAD <file>..." to unstage)

            renamed:    README.md -> README
      #+end_src

    - Git has a ~mv~ command (e.g. ~git mv README.md README~), which is equivalent
      to running something like:
      #+begin_src bash
        mv README.md README  # Or any other ways, like in GUI, you can use to rename a file
        git rm README.md
        git add README
      #+end_src
      + _The only real difference is that ~git mv~ is one command instead of three._

      + The three commands way is still useful:
        you can use any tool you like to rename (shell's ~mv~, GUI, etc.) a file,
        and address the add/rm (~git add~ and ~git rm~) later, before you commit.

** DONE 2.3 Viewing the Commit History - 39
   CLOSED: [2019-11-23 Sat 18:27]
   - ~git log~

   - ~git log -p~ / ~git log --patch~
     Use ~-<number>~ to limit the number of commits you want to log
     Display in patch-like view

   - ~git log --stat~
     Like ~--patch~, but only one statics line per file, without details of
     difference

   - ~git log --pretty=<format>~
     + ~oneline~

     + ~format:<format-string>~
       Example: ~git log --pretty=format:"%h - %an, %ar : %s"~

     + Table1. Useful options for ~git log --pretty=format~
       TODO TODO TODO

   - Distinguish /author/ and /committer/:
     + Author :: the person who originally wrote the work,
     + Committer :: the person who last applied the work.

   - So, if you send in a patch to a project and one of the core members applies
     the patch, both of you get credit — _you as the /author/, and the core
     member as the /committer/._

   - Another useful option ~--graph~

   - Table 2. Common options to ~git log~
     TODO TODO TODO

*** DONE Limiting Log Output - 44
    CLOSED: [2019-11-23 Sat 18:27]
    - ~-<n>~

    - ~--since~ and ~--until~
      Example: ~git log --since=2.weeks~
      These options can work with lots of formats like ~"2018-01-15"~ or
      ~"2 years 1 day 3 minutes ago"~

    - Use ~--author~ to filter on a specific /author/.
      Use ~--committer~ to filter on a specific /comitter/.

    - Use ~--grep~ to search for keywords in the commit messages.

    - Use ~--all-match~ option to further limit the output to just those commits
      that match *all* ~--grep~ patterns.

    - ~-S~ only show commits adding or removing code match the string.
      For example, ~git log -S function_name~
      + *CAUTION* TODO TODO TODO
        This is _ALWAYS_ the last option and is generally preceded by double
        dashes (~--~) to _separate the paths from the options_.

    - *Preventing the display of merge commits*
      Use ~--no-merges~

** DONE 2.4 Undoing Things - 46
   CLOSED: [2019-11-23 Sat 18:55]
   - *CAUTION*:
     Sometimes, undoing things can be _DANGEOUS_ -- you *can't* always undo some
     of these undos!
     *This is the one of the few areas in Git where you may lose some work if
     you do it wrong*

   - ~git commit --amend~
     =from Jian= =IMPORTANT=
     I think it's better not do this and create more commits -- we can merge
     them later! This way is safer than using the ~--amend~ option!!!

*** DONE Unstaging a Staged File - 47
    CLOSED: [2019-11-23 Sat 18:44]
    - Unstage a file with ~git reset HEAD <file>~
      Acutally, after staging files with ~git add~, when you run ~git status~,
      there will be a hint message that =(use "git reset HEAD <file> ...") to unstage)=.

    - *TIPS*
      It's true that ~git reset~ _CAN BE a *dangerous* command_, especially if you
      provide the ~--hard~ flag.
        _HOWEVER_, in the scenario described above, the file in your working
      directory is not touched (=from Jian= change the staged status of a file
      won't touch its content), so it's relatively safe.

*** DONE Unmodifying a Modified File - 48
    CLOSED: [2019-08-19 Mon 01:14]
    - ~git checkout -- <file>~

    - ~git status~ can also give hits about this like:
      #+begin_src text
        Changes not staged for commit:
          (use "git add <file>..." to update what will be committed)
          (use "git checkout -- <file>..." to discard changes in working directory)
      #+end_src

    - *CAUTION*:
      ~git checkout -- <file>~ is dangerous.
      Any local changes you made to that file are gone -- _Git just replaced that
      file with the most recently-committed version._
      *Don't ever use this command unless you absolutely know that you don't want
      those unsaved local changes.*

      + =from Jian= To avoid this,
        * Solution 1:
          Add a hook for this command with reminder

        * Solution 2: =from Jian= I prefer this!!!
          Add a hook for this command without reminder, but implicitly
          create a branch with snapshot before this command.

        * Solution 3:
          Manually create a branch with snapshot before this command, and then
          switch back and run this command.

      + =from Jian=
        I prefer Solution 2, and we should add hooks to all the dangerous
        commands!!! TODO TODO TODO

    - *Remember*: =IMPORTANT= TODO TODO TODO
      + _Anything that is committed in Git can almost always be recovered._
        Even commits that were on branches that were deleted or commits that
        were overwritten with an ~--amend~ commit can be recovered (see Data
        Recovery for data recovery). TODO _HOWTO ???_ TODO

      + However, _anything you lose that was never committed is likely never to be
        seen again._

** TODO 2.5 Working with Remotes - 50
*** TODO Showing Your Remotes - 51
*** TODO Adding Remote Repositories - 52
*** TODO Fetching and Pulling from Your Remotes - 53
*** TODO Pushing to Your Remotes - 53
*** TODO Inspecting a Remote - 54
*** TODO Renaming and Removing Remotes - 55

** TODO 2.6 Tagging - 56
*** TODO Listing Your Tags - 56
*** TODO Creating Tags - 57
*** TODO Annotated Tags - 57
*** TODO Lightweight Tags - 58
*** TODO Tagging Later - 58
*** TODO Sharing Tags - 59
*** TODO Deleting Tags - 60
*** TODO Checking out Tags - 61

** DONE 2.7 Git Aliases - 62 -
   CLOSED: [2019-08-19 Mon 02:11]
   - Create shorter name alias for exist commands
     + Command:
       #+begin_src shell
         $ git config --global alias.co checkout
         $ git config --global alias.br branch
         $ git config --global alias.ci commit
         $ git config --global alias.st status
       #+end_src

     + =.gitconfig= file:
       #+begin_src text
         [alias]
           co = checkout
           br = branch
           ci = commit
           st = status
       #+end_src

   - Create alias for commands with options
     ~git config --global alias.unstage 'reset HEAD --'~

   - A useful command -- show the lastest commit log:
     ~git config --global alias.last 'log -1 HEAD'~

   - Create a alias for external command -- prefix with ~!~:
     ~git config --global alias.visual '!gitk'~
     + Usage:
       ~git visual~

     + Actual external command:
       ~gitk~

** DONE 2.8 Summary - 63
   CLOSED: [2019-08-19 Mon 01:59]

* TODO 3. Git Branching - 64
  - Nearly every VCS has some form of branching support.

  - _Many of their /branching/ is EXPENSIVE._
    One of the "killer feature" of Git is that it branches is incredibly
    _lightweight_.

  - Git enourages workflows that branch and merge often.

** TODO 3.1 Branches in a Nutshell - 64
*** TODO Creating a New Branch - 66
*** TODO Switching Branches - 67

** TODO 3.2 Basic Branching and Merging - 71
*** TODO Basic Branching - 71
*** TODO Basic Merging - 76
*** TODO Basic Merge Conflicts - 77

** TODO 3.3 Branch Management - 80
*** TODO Changing a branch name - 81
**** TODO Changing the master branch name - 82
    
** TODO 3.4 Branching Workflows - 83
*** TODO Long-Running Branches - 84
*** TODO Topic Branches - 85

** TODO 3.5 Remote Branches - 87
*** TODO Pushing - 92
*** TODO Tracking Branches - 93
*** TODO Pulling - 95
*** TODO Deleting Remote Branches - 95

** TODO 3.6 Rebasing - 96
*** TODO The Basic Rebase - 96
*** TODO More Interesting Rebases - 98
*** TODO The Perils of Rebasing - 101
*** TODO Rebase When You Rebase - 103
*** TODO Rebase vs. Merge - 104

** TODO 3.7 Summary - 105

* TODO 4. Git on the Server - 106
** TODO 4.1 The Protocols - 106
*** TODO Local Protocol - 106
**** The Pros - 107
**** The Cons - 107

*** TODO The HTTP Protocol - 108
**** Smart HTTP - 108
**** Dumb HTTP - 108
***** The Pros - 109
***** The Cons - 109

*** TODO The SSH Protocol - 109
**** The Pros - 110
**** The Cons - 110

*** TODO The Git Protocol - 110
**** The Pros - 110
**** The Cons - 110
     
** TODO 4.2 Getting Git on a Server - 111
*** TODO Putting the Bare Repository on a Server - 111
*** TODO Small Setups - 112
**** TODO SSH Access - 112

** TODO 4.3 Generating Your SSH Public Key - 113
** TODO 4.4 Setting Up the Server - 114
** TODO 4.5 Git Daemon - 117
** TODO 4.6 Smart HTTP - 118
** TODO 4.7 GitWeb - 120
** TODO 4.8 GitLab - 122
*** TODO Installation - 122
*** TODO Administration - 122
**** TODO Users - 123
**** TODO Groups - 123
**** TODO Projects - 124
**** TODO Hooks - 124

*** TODO Basic Usage - 124
*** TODO Working Together - 125

** TODO 4.9 Third Party Hosted Options - 125
** TODO 4.10 Summary - 126
   
* TODO 5. Distributed Git - 127
** TODO 5.1 Distributed Workflows - 127
*** TODO Centralized Workflow - 127
*** TODO Integration-Manager Workflow - 128
*** TODO Dictator and Lieutenants Workflow - 129
*** TODO Patterns for Managing Source Code Branches - 129
*** TODO Workflows Summary - 130

** TODO 5.2 Contributing to a Project - 130
*** TODO Commit Guidelines - 131
*** TODO Private Small Team - 132
*** TODO Private Managed Team - 139
*** TODO Forked Public Project - 145
*** TODO Public Project over Email - 149
*** TODO Summary - 152

** TODO 5.3 Maintaining a Project - 152
*** TODO Working in Topic Branches - 153
*** TODO Applying Patches from Email - 153
**** Applying a Patch with apply - 153
**** Applying a Patch with ~am~ - 154

*** TODO Checking Out Remote Branches - 156
*** TODO Determining What Is Introduced - 157
*** TODO Integrating Contributed Work - 158
**** Merging Workflows - 159
**** Large-Merging Workflows - 161
**** Rebasing and Cherry-Picking Workflows - 162
**** Rerere - 164

*** TODO Tagging Your Releases - 164
*** TODO Generating a Build Number - 165
*** TODO Preparing a Release - 166
*** TODO The Shortlog - 166

** TODO 5.4 Summary - 167

* TODO 6. GitHub - 165
** TODO 6.1 Account Setup and Configuration - 168
*** TODO SSH Access - 169
*** TODO Your Avatar - 170
*** TODO Your Email Address - 172
*** TODO Two Factor Authentication - 172

** TODO 6.2 Contributing to a Project - 173
*** TODO Forking Projects - 173
*** TODO The GitHub Flow - 174
**** TODO Creating a Pull Request - 174
**** TODO Iterating on a Pull Request - 178

*** TODO Advanced Pull Requests - 182
**** Pull Requests as Patches - 182
**** Keeping up with Upstream - 182
**** References - 185
**** GitHub Flavored Markdown - 187
***** Task Lists - 188
***** Code Snippets - 189
***** Quoting - 189
***** Emoji - 190
***** Images - 190

**** Keep your GitHub public repository up-to-date - 192

** TODO 6.3 Maintaining a Project - 193
*** TODO Creating a New Repository - 193
*** TODO Adding Collaborators - 195
*** TODO Managing Pull Requests - 196
**** Email Notifications - 197
**** Collaborating on the Pull Request - 198
**** Pull Request Refs - 199
**** Pull Requests on Pull Requests - 201

*** TODO Mentions and Notifications - 202
**** The Notifications Page - 203
***** Web Notifications - 204
***** Email Notifications - 204

*** TODO Special Files - 205
**** README - 206
**** CONTRIBUTING - 206

*** TODO Project Administration - 206
**** Changing the Default Branch - 207
**** Transferring a Project - 207

** TODO 6.4 Managing an organization - 208
*** TODO Organization Basics - 208
*** TODO Teams - 208
*** TODO Audit Log - 210

** TODO 6.5 Scripting GitHub - 211
*** TODO Services and Hooks - 211
**** Services - 212
**** Hooks - 213

*** TODO The GitHub API - 215
**** Basic Usage - 216
**** Commenting on an Issue - 217
**** Changing the Status of a Pull Request - 218

*** TODO Octokit - 220

** TODO 6.6 Summary - 220

   
   
* TODO 7. Git Tools - 221
** TODO 7.1 Revision Selection - 221
*** Single Revisions - 221
*** Short SHA-1 - 221
*** Branch References - 223
*** RefLog Shortnames - 224
*** Ancestry References - 225
*** Commit Ranges - 227
**** Double Dot - 228
**** Multiple Points - 229
**** Triple Dot - 229

** TODO 7.2 Interactive Staging - 230
*** Staging and Unstaging Files - 230
*** Staging Patches - 232

** TODO 7.3 Stashing and Cleaning - 234
*** Stashing Your Work - 234
*** Creative Stashing - 236
*** Creating a Branch from a Stash - 238
*** Cleaning Your Working Directory - 239

** TODO 7.4 Signing Your Work - 240
*** GPG Introduction - 240
*** Signing Tags - 241
*** Verifying Tags - 241
*** Signing Commits - 242
*** Everyone Must Sign - 244

** TODO 7.5 Searching - 244
*** Git Grep - 244
*** Git Log Searching - 246
**** Line Log Search - 247

** TODO 7.6 Rewriting History - 248
*** Changing the Last Commit - 248
*** Changing Multiple Commit Messages - 249
*** Reordering Commits - 251
*** Squashing Commits - 252
*** Splitting a Commit - 253
*** Deleting a Commit - 254
*** The Nuclear Option: filter-branch - 254
**** Removing a File from Every Commit - 255
**** Making a Subdirectory the New Root - 255
**** Changing EMail Addresses Globally - 255

** TODO 7.7 Reset Demystified - 256
*** The Three Trees - 256
**** The HEAD - 256
**** The Index - 257
**** The Working Directory - 257

*** The Workflow - 258
*** The Role of Reset - 264
**** Step 1: Move HEAD - 265
**** Step 2: Updating the Index (--mixed) - 266
**** Step 3: Updating the Working Directory (--hard) - 267
**** Recap - 268

*** Reset with a Path - 269
*** Squashing - 271
*** Check It Out - 274
**** Without Paths - 275
**** With Paths - 275

*** Summary - 276

** TODO 7.8 Advanced Merging - 276
*** TODO Merge Conflicts - 277
**** TODO Aborting a Merge - 279
**** TODO Ignoring Whitespace - 280
**** TODO Manual File Re-merging - 280
**** TODO Checking Out Conflicts - 283
**** TODO Merge Log - 285
**** TODO Combined Diff Format - 286

*** TODO Undoing Merges - 288
**** Fix the References - 289
**** Reverse the Commit - 290

*** TODO Other Types of Merges - 291
**** Our or Theirs Preference - 291
**** Subtree Merging - 293

** TODO 7.9 Rerere - 295
** TODO 7.10 Debugging with Git - 301
*** TODO File Annotation - 301
*** TODO Binary Search - 302

** TODO 7.11 Submodules - 304
*** Starting with Submodules - 304
*** Cloning a Project with Submodules - 306
*** Working on a Project with Submodules - 308
**** Pulling in Upstream Changes from the Submodule Remote - 308
**** Pulling in Upstream Changes from the Project Remote - 312
**** Working on a Submodule - 313
**** Publishing Submodule Changes - 316
**** Merging Submodule Changes - 317
     
*** Submodule Tips - 320
**** Submodule Foreach - 320
**** Useful Aliases - 322

*** Issues with Submodules - 323
**** Switching branches - 323
**** Switching from subdirectories to submodules - 325

** TODO 7.12 Bundling - 326
** TODO 7.13 Replace - 330
** TODO 7.14 Credential Storage - 338
*** TODO Under the Hood - 339
*** TODO A Custom Credential Cache - 341

** TODO 7.15 Summary - 343
   
* TODO 8. Customizing Git - 344
** TODO 8.1 Git Configuration - 344
*** TODO Basic Client Configuration - 344
**** ~core.editor~
**** ~commit.template~
**** ~core.pager~
**** ~user.signingkey~
**** ~core.excludesfile~
**** ~help.autocorrect~

*** TODO Colors in Git - 347
**** ~color.ui~
**** ~color.*~

*** TODO External Merge and Diff Tools - 348
*** TODO Formatting and Whitespace - 351
**** ~core.autocrlf~ - 347
**** ~core.whitespace~ - 348

*** TODO Server Configuration - 353
**** ~receive.fsckObjects~ - 353
**** ~receive.denyNonFastForwards~ - 353
**** ~receive.denyDeletes~ - 354

** TODO 8.2 Git Attributes - 354
*** Binary Files - 354
**** Indentifying Binary Files - 354
**** Diffing Binary Files - 355

*** Keyword Expansion - 357
*** Exporting Your Repository - 360
**** ~export-ignore~ - 360
**** ~export-subst~ - 361

*** Merge Strategies - 362

** TODO 8.3 Git Hooks - 362
*** Installing a Hook - 362
*** Client-Side Hooks - 363
**** Committing-Workflow Hooks - 363
**** Email Workflow Hooks - 363
**** Other Client Hooks - 364

*** Server-Side Hooks - 364
**** ~pre-receive~
**** ~update~
**** ~post-receive~

** TODO 8.4 An Example Git-Enforced Policy - 365
*** Server-Side Hook - 365
**** Enforcing a Specific Commit-Message Format - 366
**** Enforcing a User-Based ACL System - 367
**** Testing It Out - 370

*** Client-Side Hooks - 372

** TODO 8.5 Summary - 375
   
* TODO 9. Git and Other Systems - 376
** TODO 9.1 Git as a Client - 376
*** TODO Git and Subversion - 376
**** ~git svn~
**** Setting Up
**** Getting Started
**** Committing Back to Subversion
**** Pulling in New Changes
**** Git Branching Issues
**** Subversion Branching
***** Creating a New SVN Branch
***** Switching Active Branches

**** Subversion Commands
***** SVN Style History
***** SVN Annotation
***** SVN Server Information
***** Ignoring What Subversion Ignores
      
**** Git-Svn Summary

*** TODO Git and Mercurial - 387
**** ~git-remote-hg~
**** Getting Started
**** Workflow
**** Branches and Bookmarks
**** Mercurial Summary

*** TODO Git and Bazaar - 394
**** Create a Git repository from a Bazaar repository
**** Bazaar branches
**** Ignore what is ignored with =.bzrignore=
**** Fetch the change of the remote repository
**** Push your work on the remote repository
**** Caveats
**** Summary

*** TODO Git and Perforce - 397
**** Git Fusion
***** Setting Up
***** Fusion Configuration
***** Workflow
***** Git-Fusion Summary

**** Git-p4
***** Setting Up
***** Getting Started
***** Workflow
***** Branching

**** Git and Perforce Summary


** TODO 9.2 Migrating to Git - 413
*** TODO Subversion - 413
*** TODO Mercurial - 415
*** TODO Bazaar - 419
**** Getting the bzr-fastimport plugin - 419
**** Project with a single branch - 420
**** Case of a project with a main branch and a working branch - 420
**** Synchronizing the staging area - 421
**** Ignoring the files that were ignored with =.bzrignore= - 421
**** Sending your repository to the server - 421

*** TODO Perforce - 422
**** TODO Perforce Git Fusion - 422
**** TODO Git-p4 - 422

*** TODO A Custom Importer - 423

** TODO 9.3 Summary - 431
   
* TODO 10. Git Internals - 432
** TODO 10.1 Plumbing and Porcelain - 432
** TODO 10.2 Git Objects - 433
*** TODO Tree Objects - 435
*** TODO Commit Objects - 438
*** TODO Object Storage - 441

** TODO 10.3 Git References - 443
*** TODO The HEAD - 444
*** TODO Tags - 445
*** TODO Remotes - 446

** TODO 10.4 Packfiles - 447
** TODO 10.5 The Refspec - 450
*** TODO Pushing Refspecs - 452
*** TODO Deleting References - 453

** TODO 10.6 Transfer Protocols - 453
*** TODO The Dumb Protocol - 453
*** TODO The Smart Protocol - 455
**** TODO Uploading Data - 455
***** TODO SSH - 455
***** TODO HTTP(S) - 456

**** TODO Downloading Data - 457
***** TODO SSH - 457
***** TODO HTTP(S) - 458

*** TODO Protocol Summary - 458

** TODO 10.7 Maintenance and Data Recovery - 458
*** TODO Maintenance - 458
*** TODO Data Recovery - 459
*** TODO Removing Objects - 462

** TODO 10.8 Environment Variables - 465
*** TODO Global Behavior - 466
*** TODO Repository Locations - 466
*** TODO Pathspecs - 467
*** TODO Committing - 467
*** TODO Networking - 467
*** TODO Diffing and Merging - 468
*** TODO Debugging - 468
*** TODO Miscellaneous - 470

** TODO 10.9 Summary - 471
   
* TODO Appendix A: Git in Other Environments - 472
** TODO Graphical Interfaces - 472
*** TODO =gitk= and =git-gui= - 472
*** TODO GitHub for macOS and Windows - 474
**** TODO Installation - 476
**** TODO Recommended Workflow - 476
**** TODO Summary - 477

*** TODO Other GUIs - 477

** TODO Git in Visual Studio - 477
** TODO Git in Visual Studio Code - 479
** TODO Git in IntelliJ/PyCharm/WebStorm/PhpStorm/RubyMine - 479
** TODO Git in Sublime Text - 480
** TODO Git in Bash - 480
** TODO Git in Zsh - 481
** TODO Git in Powershell - 483
*** Installation - 483
**** Prerequisites (Windows only) - 483
**** PowerShell Gallery - 484
**** Update PowerShell Prompt - 484
**** From Source - 484

** TODO Summary - 485
   
* TODO Appendix B: Embedding Git in your Applications - 486
** TODO Command-line Git - 486
** TODO Libgit2 - 486
*** TODO Advanced Functionality - 489
*** TODO Other Bindings - 490
**** LibGit2Sharp - 490
**** objective-git - 491
**** pygit2 - 491

*** TODO Further Reading - 491

** TODO JGit - 491
*** Getting Set Up - 491
*** Plumbing - 492
*** Porcelain - 494
*** Further Reading - 495

** TODO go-git - 495
*** Advanced Functionality - 496
*** Further Reading - 496

** TODO Dulwich - 496
*** TODO Further Reading - 497
    
* TODO Appendix C: Git Commands - 498
** TODO Setup and Config - 498
*** TODO ~git config~
*** TODO ~git config core.editor~ commands
*** TODO ~git help~

** TODO Getting and Creating Projects - 500
*** TODO ~git init~
*** TODO ~git clone~

** TODO Basic Snapshotting - 501
*** TODO ~git add~
*** TODO ~git status~
*** TODO ~git diff~
*** TODO ~git difftool~
*** TODO ~git commit~
*** TODO ~git reset~
*** TODO ~git rm~
*** TODO ~git mv~
*** TODO ~git clean~

** TODO Branching and Merging - 503
*** TODO ~git branch~
*** TODO ~git checkout~
*** TODO ~git merge~
*** TODO ~git mergetool~
*** TODO ~git log~
*** TODO ~git stash~
*** TODO ~git tag~

** TODO Sharing and Updating Projects - 505
*** TODO ~git fetch~
*** TODO ~git pull~
*** TODO ~git push~
*** TODO ~git remote~
*** TODO ~git archive~
*** TODO ~git submodule~

** TODO Inspection and Comparison - 507
*** TODO ~git show~
*** TODO ~git shortlog~
*** TODO ~git describe~

** TODO Debugging - 508
*** TODO ~git bisect~
*** TODO ~git blame~
*** TODO ~git grep~

** TODO Patching - 509
*** TODO ~git cherry-pick~
*** TODO ~git rebase~
*** TODO ~git revert~

** TODO Email - 509
*** TODO ~git apply~
*** TODO ~git am~
*** TODO ~git format-patch~
*** TODO ~git imap-send~
*** TODO ~git send-email~
*** TODO ~git request-pull~

** TODO External Systems - 511
*** TODO ~git svn~
*** TODO ~git fast-import~

** TODO Administration - 511
*** TODO ~git gc~
*** TODO ~git fsck~
*** TODO ~git reflog~
*** TODO ~git filter-branch~

** TODO Plumbing Commands - 512
   
* Index - 513
