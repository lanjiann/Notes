#+TITLE: Learn You a Haskell for Great Good!
#+AUTHOR: Miran Lipovaƒça
#+YEAR: 2011
#+STARTUP: overview
#+STARTUP: entitiespretty


* Table of Contents                                      :TOC_4_org:noexport:
- [[Introduction][Introduction]]
  - [[About this tutorial][About this tutorial]]
  - [[So what's Haskell?][So what's Haskell?]]
  - [[What you need to dive in][What you need to dive in]]
- [[Starting Out][Starting Out]]
  - [[Ready, set, go!][Ready, set, go!]]
  - [[Baby's first functions][Baby's first functions]]
  - [[An intro to lists][An intro to lists]]
  - [[Texas ranges][Texas ranges]]
  - [[I'm a list comprehension][I'm a list comprehension]]
  - [[Tuples][Tuples]]
- [[Types and Typeclasses][Types and Typeclasses]]
  - [[Believe the type][Believe the type]]
  - [[Type variables][Type variables]]
  - [[Typeclasses 101][Typeclasses 101]]
- [[Syntax in Functions][Syntax in Functions]]
  - [[Pattern matching][Pattern matching]]
  - [[Guards, guards!][Guards, guards!]]
  - [[Where!?][Where!?]]
  - [[Let it be][Let it be]]
  - [[Case expressions][Case expressions]]
- [[Recursion][Recursion]]
  - [[Hello recursion!][Hello recursion!]]
  - [[Maximum awesome][Maximum awesome]]
  - [[A few more recursive functions][A few more recursive functions]]
  - [[Quick, sort!][Quick, sort!]]
  - [[Thinking recursively][Thinking recursively]]
- [[Higher Order Functions][Higher Order Functions]]
  - [[Curried functions][Curried functions]]
  - [[Some higher-orderism is in order][Some higher-orderism is in order]]
  - [[Maps and filters][Maps and filters]]
  - [[Lambdas][Lambdas]]
  - [[Only folds and horses][Only folds and horses]]
  - [[Function application with $][Function application with $]]
  - [[Function composition][Function composition]]
- [[Modules][Modules]]
  - [[Loading modules][Loading modules]]
  - [[Data.List][Data.List]]
  - [[Data.Char][Data.Char]]
  - [[Data.Map][Data.Map]]
  - [[Data.Set][Data.Set]]
  - [[Making our own modules][Making our own modules]]
- [[Making Our Own Types and Typeclasses][Making Our Own Types and Typeclasses]]
  - [[Algebraic data types intro][Algebraic data types intro]]
  - [[Record syntax][Record syntax]]
  - [[Type parameters][Type parameters]]
  - [[Derived instances][Derived instances]]
  - [[Type synonyms][Type synonyms]]
  - [[Recursive data structures][Recursive data structures]]
  - [[Typeclasses 102][Typeclasses 102]]
  - [[A yes-no typeclass][A yes-no typeclass]]
  - [[The Functor typeclass][The Functor typeclass]]
  - [[Kinds and some type-foo][Kinds and some type-foo]]
- [[Input and Output][Input and Output]]
  - [[Hello, world!][Hello, world!]]
  - [[Files and streams][Files and streams]]
  - [[Command line arguments][Command line arguments]]
  - [[Randomness][Randomness]]
  - [[Bytestrings][Bytestrings]]
  - [[Exceptions][Exceptions]]
- [[Functionally Solving Problems][Functionally Solving Problems]]
  - [[Reverse Polish notation calculator][Reverse Polish notation calculator]]
  - [[Heathrow to London][Heathrow to London]]
- [[Functors, Applicative Functors and Monoids][Functors, Applicative Functors and Monoids]]
  - [[Functors redux][Functors redux]]
  - [[Applicative functors][Applicative functors]]
  - [[The newtype keyword][The newtype keyword]]
  - [[Monoids][Monoids]]
- [[A Fistful of Monads][A Fistful of Monads]]
  - [[Getting our feet wet with Maybe][Getting our feet wet with Maybe]]
  - [[The Monad type class][The Monad type class]]
  - [[Walk the line][Walk the line]]
  - [[do notation][do notation]]
  - [[The list monad][The list monad]]
  - [[Monad laws][Monad laws]]
- [[For a Few Monads More][For a Few Monads More]]
  - [[Writer? I hardly know her!][Writer? I hardly know her!]]
  - [[Reader? Ugh, not this joke again.][Reader? Ugh, not this joke again.]]
  - [[Tasteful stateful computations][Tasteful stateful computations]]
  - [[Error error on the wall][Error error on the wall]]
  - [[Some useful monadic functions][Some useful monadic functions]]
  - [[Making monads][Making monads]]
- [[Zippers][Zippers]]
  - [[Taking a walk][Taking a walk]]
  - [[A trail of breadcrumbs][A trail of breadcrumbs]]
  - [[Focusing on lists][Focusing on lists]]
  - [[A very simple file system][A very simple file system]]
  - [[Watch your step][Watch your step]]
- [[Tips][Tips]]

* Introduction
** About this tutorial
** So what's Haskell?
** What you need to dive in
* Starting Out
** Ready, set, go!
** Baby's first functions
** An intro to lists
** Texas ranges
** I'm a list comprehension
** Tuples
* Types and Typeclasses
** Believe the type
** Type variables
** Typeclasses 101
* Syntax in Functions
** Pattern matching
** Guards, guards!
** Where!?
** Let it be
** Case expressions
* Recursion
** Hello recursion!
** Maximum awesome
** A few more recursive functions
** Quick, sort!
** Thinking recursively
* Higher Order Functions
** Curried functions
** Some higher-orderism is in order
** Maps and filters
** Lambdas
** Only folds and horses
** Function application with $
** Function composition
* Modules
** Loading modules
** Data.List
** Data.Char
** Data.Map
** Data.Set
** Making our own modules
* Making Our Own Types and Typeclasses
** Algebraic data types intro
** Record syntax
** Type parameters
** Derived instances
** Type synonyms
** Recursive data structures
** Typeclasses 102
** A yes-no typeclass
** The Functor typeclass
** Kinds and some type-foo
* Input and Output
** Hello, world!
** Files and streams
** Command line arguments
** Randomness
** Bytestrings
** Exceptions
* Functionally Solving Problems
** Reverse Polish notation calculator
** Heathrow to London
* Functors, Applicative Functors and Monoids
** Functors redux
** Applicative functors
** The newtype keyword
** Monoids
* A Fistful of Monads
** Getting our feet wet with Maybe
** The Monad type class
** Walk the line
** do notation
** The list monad
** Monad laws
* For a Few Monads More
** Writer? I hardly know her!
** Reader? Ugh, not this joke again.
** Tasteful stateful computations
** Error error on the wall
** Some useful monadic functions
** Making monads
* Zippers
** Taking a walk
** A trail of breadcrumbs
** Focusing on lists
** A very simple file system
** Watch your step
* Tips
