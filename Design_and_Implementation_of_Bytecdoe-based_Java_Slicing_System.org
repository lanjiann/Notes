#+TITLE: Design and Implementation of Bytecode-based Java Slicing System
#+VERSION: XXXX
#+AUTHOR: Fumiaki Umemori, Kenji Konda, Reishi Yokomori, Katsuro Inoue
#+STARTUP: entitiespretty

* Table of Contents                                      :TOC_4_org:noexport:
- [[Abstract][Abstract]]
- [[1 Introduction][1 Introduction]]
- [[2 Program Slice][2 Program Slice]]
  - [[2.1 Static Slice][2.1 Static Slice]]
  - [[2.2 Dynamic Slice][2.2 Dynamic Slice]]
  - [[2.3 DC (Dependence-Cache) Slicing][2.3 DC (Dependence-Cache) Slicing]]
  - [[2.4 Comparison with Static, Dynamic and DC Slices][2.4 Comparison with Static, Dynamic and DC Slices]]
- [[3 Implementation of DC Slicing for Java][3 Implementation of DC Slicing for Java]]
  - [[3.1 Cross Reference Table between Source Code and Bytecode][3.1 Cross Reference Table between Source Code and Bytecode]]
  - [[3.2 Control Dependence Analysis][3.2 Control Dependence Analysis]]
  - [[3.3 Data Dependence Analysis for DC Slicing][3.3 Data Dependence Analysis for DC Slicing]]
  - [[3.4 Computation of a Slice][3.4 Computation of a Slice]]
  - [[3.5 System Architecture][3.5 System Architecture]]
- [[4 Evaluation][4 Evaluation]]
  - [[4.1 Slice Size][4.1 Slice Size]]
  - [[4.2 Analysis Cost][4.2 Analysis Cost]]
- [[5 Summary][5 Summary]]
- [[References][References]]

* Abstract
  - program slice :: a set of statements that affect the value of variable v in a
                     statement s.

  - In order to calculate a /program slice/, we must know the _dependence
    relations_ between statements in the program.

  - /Program slicing/ techniques are roughly divided into _TWO_ categories:
    + static slicing
    + dynamic slicing

  - We have proposed DC slicing technique which uses _BOTH_ static and dynamic
    information.

  - In this paper,
    we propose a method of constructing a DC slicing system for Java programs.

  - Java programs have many elements which are dynamically determined at the time
    of execution, so the DC slicing technique is effective in the analysis of
    Java programs.

    To construct the system, we have extended Java Virtual Machine for
    extraction of dynamic information.

  - We have applied the system to several sample program to evaluate our approach.
    =Check=

* DONE 1 Introduction
  CLOSED: [2017-10-19 Thu 13:27]
  - =TODO=

  - The size of the /static slice/ is _larger than_ that of the /dynamic/ one in
    general.

    Since the /static slice/ considers all possibility of any valid input data.

    The size of the /dynamic slice/ is smaller in general,
    but the /dynamic/ one requires a large amount of CPU time and memory space
    to obtain it.

  - Use both /static slice/ and /dynamic slice/ to obtain suitable compromises of
    + slice precision
    + slicing performance

  - This DC slicing system consists of _4_ subsystems:
    + an extended Java Compiler
      that can generate a cross reference table between the source code and the
      bytecode.

    + an extended Java Virtual Machine(JVM)
      that can perform the dynamic data dependence analysis for the bytecode,

    + a static control dependence analysis tool for the bytecode

    + a /slicer/

  - A slice in the bytecode calculated by the /slicer/ is mapped onto a slice in
    the source code by using the cross reference table .

* TODO 2 Program Slice
  In this section, we briefly show
  + static slicing
  + dynamic slicing
  + dependence-cache (DC) slicing for further discussions.

** 2.1 Static Slice
** 2.2 Dynamic Slice
** 2.3 DC (Dependence-Cache) Slicing
** 2.4 Comparison with Static, Dynamic and DC Slices

* TODO 3 Implementation of DC Slicing for Java
** 3.1 Cross Reference Table between Source Code and Bytecode
** 3.2 Control Dependence Analysis
** 3.3 Data Dependence Analysis for DC Slicing
** 3.4 Computation of a Slice
** 3.5 System Architecture

* TODO 4 Evaluation
** 4.1 Slice Size
** 4.2 Analysis Cost

* TODO 5 Summary

* TODO References
